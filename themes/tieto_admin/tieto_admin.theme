<?php

/**
 * @file
 * Functions to support theming in the tieto_admin theme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_admin_preprocess_html(&$variables) {
  // If on a node add or edit page, add a node-layout class.
  $path_args = explode('/', Drupal::request()->getPathInfo());
  if ($suggestions = theme_get_suggestions($path_args, 'page', '-')) {
    foreach ($suggestions as $suggestion) {
      if ($suggestion === 'page-node-edit' || strpos($suggestion, 'page-node-add') !== FALSE) {
        $variables['attributes']['class'][] = 'node-form-layout';
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function tieto_admin_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  $attributes = Drupal::request()->attributes;
  if ($attributes->get('_entity_form') !== "node.edit" && $node = $attributes->get('node')) {
    if (method_exists($node, 'getType')) {
      array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
      if (in_array($node->getType(), [
          'campaign',
          'paragraphed_content_demo'
        ]) && $node->get('field_machine_name')->value
      ) {
        $suggestions[] = 'page__node__' . $node->getType() . '__' . $node->get('field_machine_name')->value;
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 *
 * Add custom suggestions for paragraph types with machine name.
 *
 * @todo move to module.
 */
function tieto_admin_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook === 'paragraph') {
    // Add content type suggestions.
    $attributes = Drupal::request()->attributes;
    if ($attributes->get('_entity_form') !== "node.edit" && $node = $attributes->get('node')) {
      if (method_exists($node, 'getType') && in_array($node->getType(), ['campaign', 'paragraphed_content_demo']) && $node->get('field_machine_name')->value) {
        foreach ($suggestions as $suggestion) {
          $my_suggestions[] = $suggestion;
          $my_suggestions[] = preg_replace("/^paragraph__/", 'paragraph__' . $node->get('field_machine_name')->value . "__", $suggestion);
        }
        $suggestions = $my_suggestions;
      }
    }
  }

}

/**
 * Implements hook_preprocess_page().
 */
function tieto_admin_preprocess_page(&$vars) {
  $vars['site_name'] = Drupal::config('system.site')->get('name');
}

/**
 * Implements hook_pre_render_HOOK().
 *
 * Use preprocess hook to set #attached to child elements
 * because they will be processed by Twig and drupal_render will
 * be invoked.
 */
function tieto_admin_preprocess_menu_local_tasks(&$variables) {
  if (!empty($variables['primary'])) {
    $variables['primary']['#attached'] = array(
      'library' => array(
        'tieto_admin/drupal.nav-tabs',
      ),
    );
  }
  elseif (!empty($variables['secondary'])) {
    $variables['secondary']['#attached'] = array(
      'library' => array(
        'tieto_admin/drupal.nav-tabs',
      ),
    );
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_admin_preprocess_menu_local_task(&$variables) {
  $variables['attributes']['class'][] = 'tabs__tab';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_admin_preprocess_node_add_list(&$variables) {
  if (!empty($variables['content'])) {
    /** @var Drupal\node\NodeTypeInterface $type */
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()]['label'] = $type->label();
      $variables['types'][$type->id()]['url'] = Drupal::url('node.add', array('node_type' => $type->id()));
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Displays the list of available custom block types for creation, adding
 * separate variables for the label and url.
 */
function tieto_admin_preprocess_block_content_add_list(&$variables) {
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()]['label'] = $type->label();
      $options = array('query' => Drupal::request()->query->all());
      $variables['types'][$type->id()]['url'] = Drupal::url('block_content.add_form', array('block_content_type' => $type->id()), $options);
    }
  }
}

/**
 * Implements hook_preprocess_block().
 *
 * Disables contextual links for all blocks.
 */
function tieto_admin_preprocess_block(&$variables) {
  if (isset($variables['title_suffix']['contextual_links'])) {
    unset($variables['title_suffix']['contextual_links']);
    unset($variables['elements']['#contextual_links']);

    $variables['attributes']['class'] = array_diff($variables['attributes']['class'], ['contextual-region']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_admin_preprocess_admin_block_content(&$variables) {
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $key => $item) {
      $variables['content'][$key]['url'] = $item['url']->toString();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_admin_preprocess_menu_local_action(array &$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'button--primary';
  $variables['link']['#options']['attributes']['class'][] = 'button--small';

  // We require Modernizr's touch test for button styling.
  $variables['#attached']['library'][] = 'core/modernizr';
}

/**
 * Implements hook_preprocess_field().
 */
function tieto_admin_preprocess_field(&$variables) {
  // Add rendered_confirmation_message to field variables.
  if ($variables['field_name'] === 'field_marketo_form') {
    $element = $variables['element']['#object'];

    // Get the field's raw value and format.
    list($markup, $format) = [
      $element->field_text->value,
      $element->field_text->format,
    ];

    if (isset($markup) && isset($format)) {
      $element->rendered_confirmation_message = check_markup($markup, $format);
    }
  }
}

/**
 * Implements hook_element_info_alter().
 */
function tieto_admin_element_info_alter(&$type) {
  // We require Modernizr for button styling.
  if (isset($type['button'])) {
    $type['button']['#attached']['library'][] = 'core/modernizr';
  }
}

/**
 * Implements hook_preprocess_install_page().
 */
function tieto_admin_preprocess_install_page(&$variables) {
  // tieto_admin has custom styling for the install page.
  $variables['#attached']['library'][] = 'tieto_admin/install-page';
}

/**
 * Implements hook_preprocess_maintenance_page().
 */
function tieto_admin_preprocess_maintenance_page(&$variables) {
  // tieto_admin has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'tieto_admin/maintenance-page';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Changes vertical tabs to container and adds meta information.
 */
function tieto_admin_form_node_form_alter(&$form, FormStateInterface $form_state) {
  /** @var Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();

  $form['#theme'] = array('node_edit_form');
  $form['#attached']['library'][] = 'tieto_admin/node-form';

  $form['advanced']['#type'] = 'container';
  $is_new = !$node->isNew() ? format_date($node->getChangedTime(), 'short') : t('Not saved yet');
  $form['meta'] = array(
    '#attributes' => array('class' => array('entity-meta__header')),
    '#type' => 'container',
    '#group' => 'advanced',
    '#weight' => -100,
    'published' => array(
      '#type' => 'html_tag',
      '#tag' => 'h3',
      '#value' => $node->isPublished() ? t('Published') : t('Not published'),
      '#access' => !$node->isNew(),
      '#attributes' => array(
        'class' => 'entity-meta__title',
      ),
    ),
    'changed' => array(
      '#type' => 'item',
      '#wrapper_attributes' => array('class' => array('entity-meta__last-saved', 'container-inline')),
      '#markup' => '<h4 class="label inline">' . t('Last saved') . '</h4> ' . $is_new,
    ),
    'author' => array(
      '#type' => 'item',
      '#wrapper_attributes' => array('class' => array('author', 'container-inline')),
      '#markup' => '<h4 class="label inline">' . t('Author') . '</h4> ' . $node->getOwner()->getUsername(),
    ),
  );
  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';
}
