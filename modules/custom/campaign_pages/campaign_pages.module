<?php

/**
 * @file
 * Contains campaign_pages.module
 */

use Drupal\file\Entity\File;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function campaign_pages_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the campain_pages module.
    case 'help.page.campain_pages':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Campain pages functionality') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function campaign_pages_page_attachments_alter(array &$attachments) {
  $attributes = \Drupal::request()->attributes;
  if ($attributes->get('_entity_form') !== "node.edit" && $node = $attributes->get('node')) {
    if ($machine_name = $node->get('field_machine_name')->value) {
      $css_file_name = \Drupal::theme()->getActiveTheme()->getPath() . '/css/campaign/' . $machine_name . '.css';
      if (file_exists($css_file_name)) {
        $attachments['#attached']['html_head'][] = [
          // The data.
          [
            '#type' => 'html_tag',
            '#tag' => 'style',
            '#value' => '@import url("/' . $css_file_name . '");',
            '#attributes' => array('media' => 'all'),
            '#weight' => 1000,

          ],
          'campaign_pages_css'
        ];
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add field_title_class value as class to field_title.
 */
function campaign_pages_preprocess_field(&$variables) {
  if ($variables['element']['#field_name'] === 'field_title' && isset($variables['element']['#object']->field_title_class)) {
    if ($class = $variables['element']['#object']->field_title_class->getValue()[0]['value']) {
      $variables['attributes']['class'][] = $class;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add layout--[LAYOUT] as class to paragraphs.
 */
function campaign_pages_preprocess_paragraph(&$variables) {
  if (isset($variables['paragraph']->field_anchor) && $id = $variables['paragraph']->field_anchor->getValue()[0]['value']) {
    $variables['attributes']['id'] = $id;
  }
  $layouts = [
    'field_highlighted_layout' => [
      0 => 'text_1st',
      1 => 'image_1st',
    ],
    'field_image_text_layout' => [
      0 => 'image_1st',
      1 => 'text_1st',
      2 => 'text_1st_enhanced',
    ],
    'field_simple_layout' => [
      0 => 'one_column',
      1 => 'two_column_title_1st',
      2 => 'two_column_content_1st',
      3 => 'separator',
    ],
    'field_text_boxes_layout' => [
      0 => 'none',
      1 => 'smallinfo',
      2 => 'lot_infos',
      3 => 'text_icon',
    ],
  ];
  foreach ($layouts as $field => $classes) {
    if (isset($variables['paragraph']->{$field})) {
      $layout_id = $variables['paragraph']->{$field}->getValue()[0]['value'];
      if (isset($layout_id)) {
        $variables['attributes']['class'][] = 'layout--' . $classes[$layout_id];
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess for Header paragraph type.
 */
function campaign_pages_preprocess_paragraph__header(&$variables) {
  $paragraph = &$variables['paragraph'];

  // Get background file info.
  $file = File::load($paragraph->field_background->target_id);
  $file_uri = $file->getFileUri();
  $file_mime = $file->getMimeType();

  if (in_array($file_mime, ['image/jpeg', 'image/svg+xml'])) {
    $type = 'image';
  }
  if (in_array($file_mime, ['video/mp4', 'application/mp4', 'video/webm'])) {
    $type = 'video';
  }

  // Add variables to theme.
  $variables['campaign'] = [

    'background' => [
      'type' => $type ?? 'image',
      'url' => file_create_url($file_uri),
      'mime' => $file_mime,
    ],

    'enable_parallax' => $paragraph->field_enable_parallax->value,
  ];

}
