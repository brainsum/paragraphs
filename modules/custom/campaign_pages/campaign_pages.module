<?php

/**
 * @file
 * Contains campaign_pages.module
 */

use Drupal\file\Entity\File;
use FFMpeg\Coordinate\TimeCode;
use Drupal\Component\Utility\Html;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function campaign_pages_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the campain_pages module.
    case 'help.page.campain_pages':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Campain pages functionality') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function campaign_pages_page_attachments_alter(array &$attachments) {
  $attributes = \Drupal::request()->attributes;
  if ($attributes->get('_entity_form') !== "node.edit" && $node = $attributes->get('node')) {
    if ($node->hasField('field_machine_name') && $machine_name = $node->get('field_machine_name')->value) {
      $css_file_name = \Drupal::theme()->getActiveTheme()->getPath() . '/css/campaign/' . $machine_name . '.css';
      if (file_exists($css_file_name)) {
        $attachments['#attached']['html_head'][] = [
          // The data.
          [
            '#type' => 'html_tag',
            '#tag' => 'style',
            '#value' => '@import url("/' . $css_file_name . '");',
            '#attributes' => array('media' => 'all'),
            '#weight' => 1000,

          ],
          'campaign_pages_css'
        ];
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add layout--[LAYOUT] as class to paragraphs.
 */
function campaign_pages_preprocess_paragraph(&$variables) {
  $paragraph = &$variables['paragraph'];

  // Set Anchor variable for the template.
  if ($paragraph->hasField('field_anchor')) {
    $variables['attributes']['id'] = Html::getId($paragraph->field_anchor->value);
  }

  // Define layout CSS classes.
  $layouts = [
    'field_highlighted_layout' => [
      0 => 'text_1st',
      1 => 'image_1st',
    ],
    'field_image_text_layout' => [
      0 => 'image_1st',
      1 => 'text_1st',
      2 => 'text_1st_enhanced',
    ],
    'field_simple_layout' => [
      0 => 'one-column-clean',
      1 => 'one-column-grey',
      2 => 'one-column-shaded',
      3 => 'two-column-title-1st-inverse',
      4 => 'two-column-content-1st-inverse',
      5 => 'separator-clean',
    ],
    'field_text_boxes_layout' => [
      0 => 'none',
      1 => 'smallinfo',
      2 => 'lot_infos',
      3 => 'lot_infos-grey',
      4 => 'text_icon',
    ],
    'field_marketo_form_layout' => [
      0 => 'clean',
      1 => 'download',
    ],
  ];

  // Set CSS class for the selected layout.
  foreach ($layouts as $field => $classes) {
    if ($paragraph->hasField($field)) {
      $layout_id = $paragraph->{$field}->value;
      if (isset($layout_id)) {
        $variables['attributes']['class'][] = 'layout--' . $classes[$layout_id];
      }
    }
  }

}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess for Header paragraph type.
 */
function campaign_pages_preprocess_paragraph__header(&$variables) {
  $paragraph = &$variables['paragraph'];

  // Get background file info.
  $file = File::load($paragraph->field_background->target_id);
  $file_uri = $file->getFileUri();
  $file_mime = $file->getMimeType();
  $file_path = parse_url(file_create_url($file_uri))['path'];

  if (in_array($file_mime, ['image/jpeg', 'image/svg+xml'])) {
    $type = 'image';
  }
  if (in_array($file_mime, ['video/mp4', 'application/mp4', 'video/webm'])) {
    $type = 'video';

    // Generate poster image for video if not exist.
    $video_filename = pathinfo($file_path)['filename'];
    $poster = '/sites/default/files/paragraphs/background/' . $video_filename . '_poster.jpg';

    if (! file_exists(DRUPAL_ROOT . $poster)) {
      $ffmpeg = Drupal::service('php_ffmpeg')->create([
        'loglevel' => 'quiet',
      ]);
      $video = $ffmpeg->open(drupal_realpath($file_uri));

      $video->frame(TimeCode::fromSeconds(0))->save(DRUPAL_ROOT . $poster);
    }
  }

  // Add variables to theme.
  campaign_pages_add_template_variable($variables, [
    'background' => [
      'type' => $type ?? 'image',
      'url' => $file_path,
      'mime' => $file_mime,
      'poster' => $type === 'video' ? $poster : null,
    ],

    'enable_parallax' => $paragraph->field_enable_parallax->value,
  ]);

}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess for Text Box paragraph type.
 */
function campaign_pages_preprocess_paragraph__text_box(&$variables) {
  $paragraph = &$variables['paragraph'];

  campaign_pages_add_template_variable($variables, [
    'columns' => $paragraph->getParentEntity()->field_boxes_per_row->value,
  ]);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess for Text Boxes paragraph type.
 */
function campaign_pages_preprocess_paragraph__text_boxes(&$variables) {
  $paragraph = &$variables['paragraph'];

  campaign_pages_add_template_variable($variables, [
    'columns' => $paragraph->field_boxes_per_row->value,
  ]);
}

/**
 * Appends a campaign_pages related variable to the same place:
 * $variables['campaign'][...]
 * @internal
 *
 * @param array &$variables
 *   The core $variables passed by reference.
 *
 * @param array $data
 *   New data in array format, which will be passed to the template.
 *
 * @return array
 *   The new data.
 */
function campaign_pages_add_template_variable(&$variables, $data = null) {
  if (!$data) {
    return FALSE;
  }

  // Root of campaign_pages related data in TWIG.
  // Example usage:
  // {{ campaign.background.url }}
  // {{ campaign.layout }}
  static $key = 'campaign';

  if (!isset($variables[$key])) {
    $variables[$key] = $data;
  }
  else {
    $variables[$key][] = $data;
  }

  return $data;
}
