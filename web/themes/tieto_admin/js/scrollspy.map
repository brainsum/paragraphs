{"version":3,"sources":["../../vendor/jquery-scrollspy.js","scrollspy.js"],"names":["window","$","fn","extend","scrollspy","options","action","_isString","tempOptions","_sanitizeOption","_defaults","_isObject","$container","container","length","toUpperCase","off","namespace","isNumeric","isFunction","max","min","isVertical","String","mode","each","_this","$element","enters","inside","leaves","on","$this","position","top","scrollTop","left","scrollLeft","containerHeight","height","xAndY","buffer","outerWidth","trigger","onEnter","onTick","onLeave","onLeaveTop","onLeaveBottom","containerScrollTop","elementHeight","elementOffsetTop","offset","onView","value","type","trim","defaults","property","predicate","jQuery","targets","removeClass","addClass","document","ready"],"mappings":"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","file":"scrollspy.map","sourceRoot":"..\\src\\js","sourcesContent":["/*\n * jQuery ScrollSpy Plugin\n * Author: @sxalexander, softwarespot\n * Licensed under the MIT license\n */\n(function jQueryScrollspy(window, $) {\n    // Plugin Logic\n\n    $.fn.extend({\n        scrollspy: function scrollspy(options, action) {\n            // If the options parameter is a string, then assume it's an 'action', therefore swap the parameters around\n            if (_isString(options)) {\n                var tempOptions = action;\n\n                // Set the action as the option parameter\n                action = options;\n\n                // Set to be the reference action pointed to\n                options = tempOptions;\n            }\n\n            // override the default options with those passed to the plugin\n            options = $.extend({}, _defaults, options);\n\n            // sanitize the following option with the default value if the predicate fails\n            _sanitizeOption(options, _defaults, 'container', _isObject);\n\n            // cache the jQuery object\n            var $container = $(options.container);\n\n            // check if it's a valid jQuery selector\n            if ($container.length === 0) {\n                return this;\n            }\n\n            // sanitize the following option with the default value if the predicate fails\n            _sanitizeOption(options, _defaults, 'namespace', _isString);\n\n            // check if the action is set to DESTROY/destroy\n            if (_isString(action) && action.toUpperCase() === 'DESTROY') {\n                $container.off('scroll.' + options.namespace);\n                return this;\n            }\n\n            // sanitize the following options with the default values if the predicates fails\n            _sanitizeOption(options, _defaults, 'buffer', $.isNumeric);\n            _sanitizeOption(options, _defaults, 'max', $.isNumeric);\n            _sanitizeOption(options, _defaults, 'min', $.isNumeric);\n\n            // callbacks\n            _sanitizeOption(options, _defaults, 'onEnter', $.isFunction);\n            _sanitizeOption(options, _defaults, 'onLeave', $.isFunction);\n            _sanitizeOption(options, _defaults, 'onLeaveTop', $.isFunction);\n            _sanitizeOption(options, _defaults, 'onLeaveBottom', $.isFunction);\n            _sanitizeOption(options, _defaults, 'onTick', $.isFunction);\n\n            if ($.isFunction(options.max)) {\n                options.max = options.max();\n            }\n\n            if ($.isFunction(options.min)) {\n                options.min = options.min();\n            }\n\n            // check if the mode is set to VERTICAL/vertical\n            var isVertical = window.String(options.mode).toUpperCase() === 'VERTICAL';\n\n            return this.each(function each() {\n                // cache this\n                var _this = this;\n\n                // cache the jQuery object\n                var $element = $(_this);\n\n                // count the number of times a container is entered\n                var enters = 0;\n\n                // determine if the scroll is with inside the container\n                var inside = false;\n\n                // count the number of times a container is left\n                var leaves = 0;\n\n                // create a scroll listener for the container\n                $container.on('scroll.' + options.namespace, function onScroll() {\n                    // cache the jQuery object\n                    var $this = $(this);\n\n                    // create a position object literal\n                    var position = {\n                        top: $this.scrollTop(),\n                        left: $this.scrollLeft(),\n                    };\n\n                    var containerHeight = $container.height();\n\n                    var max = options.max;\n\n                    var min = options.min;\n\n                    var xAndY = isVertical ? position.top + options.buffer : position.left + options.buffer;\n\n                    if (max === 0) {\n                        // get the maximum value based on either the height or the outer width\n                        max = isVertical ? containerHeight : $container.outerWidth() + $element.outerWidth();\n                    }\n\n                    // if we have reached the minimum bound, though are below the max\n                    if (xAndY >= min && xAndY <= max) {\n                        // trigger the 'scrollEnter' event\n                        if (!inside) {\n                            inside = true;\n                            enters++;\n\n                            // trigger the 'scrollEnter' event\n                            $element.trigger('scrollEnter', {\n                                position: position,\n                            });\n\n                            // call the 'onEnter' function\n                            if (options.onEnter !== null) {\n                                options.onEnter(_this, position);\n                            }\n                        }\n\n                        // trigger the 'scrollTick' event\n                        $element.trigger('scrollTick', {\n                            position: position,\n                            inside: inside,\n                            enters: enters,\n                            leaves: leaves,\n                        });\n\n                        // call the 'onTick' function\n                        if (options.onTick !== null) {\n                            options.onTick(_this, position, inside, enters, leaves);\n                        }\n                    } else {\n                        if (inside) {\n                            inside = false;\n                            leaves++;\n\n                            // trigger the 'scrollLeave' event\n                            $element.trigger('scrollLeave', {\n                                position: position,\n                                leaves: leaves,\n                            });\n\n                            // call the 'onLeave' function\n                            if (options.onLeave !== null) {\n                                options.onLeave(_this, position);\n                            }\n\n                            if (xAndY <= min) {\n                                // trigger the 'scrollLeaveTop' event\n                                $element.trigger('scrollLeaveTop', {\n                                    position: position,\n                                    leaves: leaves,\n                                });\n\n                                // call the 'onLeaveTop' function\n                                if (options.onLeaveTop !== null) {\n                                    options.onLeaveTop(_this, position);\n                                }\n                            } else if (xAndY >= max) {\n                                // trigger the 'scrollLeaveBottom' event\n                                $element.trigger('scrollLeaveBottom', {\n                                    position: position,\n                                    leaves: leaves,\n                                });\n\n                                // call the 'onLeaveBottom' function\n                                if (options.onLeaveBottom !== null) {\n                                    options.onLeaveBottom(_this, position);\n                                }\n                            }\n                        } else {\n                            // Idea taken from: http://stackoverflow.com/questions/5353934/check-if-element-is-visible-on-screen\n                            var containerScrollTop = $container.scrollTop();\n\n                            // Get the element height\n                            var elementHeight = $element.height();\n\n                            // Get the element offset\n                            var elementOffsetTop = $element.offset().top;\n\n                            if ((elementOffsetTop < (containerHeight + containerScrollTop)) && (elementOffsetTop > (containerScrollTop - elementHeight))) {\n                                // trigger the 'scrollView' event\n                                $element.trigger('scrollView', {\n                                    position: position,\n                                });\n\n                                // call the 'onView' function\n                                if (options.onView !== null) {\n                                    options.onView(_this, position);\n                                }\n                            }\n                        }\n                    }\n                });\n            });\n        },\n    });\n\n    // Fields (Private)\n\n    // Defaults\n\n    // default options\n    var _defaults = {\n        // the offset to be applied to the left and top positions of the container\n        buffer: 0,\n\n        // the element to apply the 'scrolling' event to (default window)\n        container: window,\n\n        // the maximum value of the X or Y coordinate, depending on mode the selected\n        max: 0,\n\n        // the maximum value of the X or Y coordinate, depending on mode the selected\n        min: 0,\n\n        // whether to listen to the X (horizontal) or Y (vertical) scrolling\n        mode: 'vertical',\n\n        // namespace to append to the 'scroll' event\n        namespace: 'scrollspy',\n\n        // call the following callback function every time the user enters the min / max zone\n        onEnter: null,\n\n        // call the following callback function every time the user leaves the min / max zone\n        onLeave: null,\n\n        // call the following callback function every time the user leaves the top zone\n        onLeaveTop: null,\n\n        // call the following callback function every time the user leaves the bottom zone\n        onLeaveBottom: null,\n\n        // call the following callback function on each scroll event within the min and max parameters\n        onTick: null,\n\n        // call the following callback function on each scroll event when the element is inside the viewable view port\n        onView: null,\n    };\n\n    // Methods (Private)\n\n    // check if a value is an object datatype\n    function _isObject(value) {\n        return $.type(value) === 'object';\n    }\n\n    // check if a value is a string datatype with a length greater than zero when whitespace is stripped\n    function _isString(value) {\n        return $.type(value) === 'string' && $.trim(value).length > 0;\n    }\n\n    // check if an option is correctly formatted using a predicate; otherwise, return the default value\n    function _sanitizeOption(options, defaults, property, predicate) {\n        // set the property to the default value if the predicate returned false\n        if (!predicate(options[property])) {\n            options[property] = defaults[property];\n        }\n    }\n}(window, window.jQuery));\n","/**\n * @file\n * Initialize ScrollSpy scripts\n */\n\nimport '../../vendor/jquery-scrollspy'\n\n($ => {\n\n    let targets = $('.field--name-field-menu, .tieto-campaign-page > .logo, #hamburger')\n\n    targets.scrollspy({\n        min: 490,\n        max: 50000,\n        onEnter: function() {\n            targets.removeClass('not-fixed')\n            targets.addClass('fixed')\n        },\n        onLeave: function() {\n            targets.removeClass('fixed')\n            targets.addClass('not-fixed')\n        }\n    })\n\n    $(document).ready(() => { targets.trigger('scroll.scrollspy') })\n\n})(jQuery)\n"]}