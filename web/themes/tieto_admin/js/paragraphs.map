{"version":3,"sources":["paragraphs.js"],"names":["$","Drupal","firstRun","Even","wrapper","wrappers","document","querySelectorAll","windowWidth","negativeToZero","number","outerWidth","el","width","offsetWidth","style","getComputedStyle","parseInt","marginLeft","marginRight","outerHeight","height","offsetHeight","marginTop","marginBottom","nodeListToArray","nodelist","array","elem","push","getCardsInRow","cards","Math","floor","ceil","getRowCount","cardsInRow","length","toInteger","string","int","Number","isNaN","didWindowChange","currentWidth","window","innerWidth","evenAll","forEach","evenImages","cardIndex","rowsInWrapper","rowIndex","cardsOfRow","highest","slice","headingsOfRow","headingHeightsOfRow","heading","querySelector","reduce","a","b","max","behaviors","equalTitle","attach","context","settings","even","setInterval","jQuery"],"mappings":";CAcC,SAAWA,EAAGC,GAETC,IAAAA,GAAW,EAENC,SAAAA,EAAKC,GAEPC,KAAAA,SAAW,KAAKA,UAAYC,SAASC,iBAAiBH,GACtDI,KAAAA,YAAc,EAEdC,KAAAA,eAAiB,SAASC,GACrBA,OAAAA,GAAU,EAAKA,EAAS,GAG7BC,KAAAA,WAAa,SAASC,GACrBC,IAAAA,EAAQD,EAAGE,YACXC,EAAQC,iBAAiBJ,GAMtBC,OAFPA,GAFiB,KAAKJ,eAAeQ,SAASF,EAAMG,aAClC,KAAKT,eAAeQ,SAASF,EAAMI,eAMlDC,KAAAA,YAAc,SAASR,GACtBS,IAAAA,EAAST,EAAGU,aACZP,EAAQC,iBAAiBJ,GAMtBS,OADPA,GAHgB,KAAKZ,eAAeQ,SAASF,EAAMQ,YAChC,KAAKd,eAAeQ,SAASF,EAAMS,gBAMnDC,KAAAA,gBAAkB,SAAUC,GAC3BC,IAAAA,EAAQ,GAD6B,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAEzBD,IAAAA,IAAU,EAAVA,EAAAA,EAAU,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,CAAlBE,IAAAA,EAAkB,EAAA,MACxBD,EAAME,KAAKD,IAH4B,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAKlCD,OAAAA,GAGJG,KAAAA,cAAgB,SAAS1B,EAAS2B,GAC9BC,OAAAA,KAAKC,MAAMD,KAAKE,KAAK,KAAKvB,WAAWP,IAAY4B,KAAKC,MAAM,KAAKtB,WAAWoB,EAAM,OAGtFI,KAAAA,YAAc,SAASJ,EAAOK,GAC1BJ,OAAAA,KAAKE,KAAKH,EAAMM,OAASD,IAG7BE,KAAAA,UAAY,SAASC,GACpBC,IAAAA,EAAMvB,SAASsB,GACXE,OAAAA,OAAOC,MAAMF,GAAQ,EAAIA,GAG9BG,KAAAA,gBAAkB,WACjBC,IAAAA,EAAeC,OAAOC,WACvB,OAAA,KAAKtC,cAAgBoC,IACjBpC,KAAAA,YAAcoC,GACZ,IAMNG,KAAAA,QAAU,WACP,KAAK1C,SAASgC,QACd,KAAKM,mBACNtC,KAAAA,SAAS2C,QAAQ,SAAS5C,GACxB6C,KAAAA,WAAW7C,IACf,OAGA6C,KAAAA,WAAa,SAAS7C,GACrB8C,IACAd,EACAe,EAFAD,EAAY,EAGZnB,EAAQ3B,EAAQG,iBAAiB,8BAGrC6B,EAAa,KAAKN,cAAc1B,EAAS2B,GACzCoB,EAAgB,KAAKhB,YAAYJ,EAAOK,GAGpC,IAAA,IAAIgB,EAAS,EAAGA,EAASD,EAAc,EAAGC,IAAY,CACpDC,IAGAC,EAHAD,EAAa,KAAK5B,gBAAgBM,GAAOwB,MAAML,EAAad,EAAagB,GACzEI,EAAgB,GAChBC,EAAsB,GAI1BJ,EAAWL,QAAQ,SAASpB,GACtB8B,IAAAA,EAAU9B,EAAK+B,cAAc,qBACjCH,EAAc3B,KAAK6B,GAEnBA,EAAQ3C,MAAMM,OAAS,GACvBoC,EAAoB5B,KAAK6B,EAAQpC,eAChC,MAGHgC,EAAUG,EAAoBG,OAAO,SAASC,EAAGC,GACxC9B,OAAAA,KAAK+B,IAAIF,EAAGC,KAIrBN,EAAcR,QAAQ,SAASpB,GAC7BA,EAAKb,MAAMM,OAASiC,EAAU,OAGhCJ,GAAad,IAQnBnC,EAAO+D,UAAUC,WAAa,CAC5BC,OAAQ,SAAUC,EAASC,GACtBlE,GAAAA,EAAU,CACXA,GAAW,EAEPmE,IAAAA,EAAO,IAAIlE,EAAK,oFACLmE,YAAY,WACzBD,EAAKtB,WACJ,QA9HV,CAmIEwB,OAAQtE","file":"paragraphs.map","sourceRoot":"..\\src\\js","sourcesContent":["/**\n * @file\n * All kind of Paragraph related JS functions\n *\n */\n\n\n/**\n  * Equal textboxes title height\n  * \n  * This solves the problem of text boxes with the element order of TITLE, IMAGE, TEXT\n  * to have an equally high title, so the images are lined up to each other nicely\n  *\n  */\n (function ($, Drupal) {\n\n  var firstRun = true;\n\n  function Even(wrapper) {\n  \n    this.wrappers = this.wrappers || document.querySelectorAll(wrapper);\n    this.windowWidth = 0;\n\n    this.negativeToZero = function(number) {\n      return (number >= 0) ? number : 0;\n    }\n  \n    this.outerWidth = function(el) {\n      var width = el.offsetWidth;\n      var style = getComputedStyle(el);\n      \n      var marginLeft = this.negativeToZero(parseInt(style.marginLeft));\n      var marginRight = this.negativeToZero(parseInt(style.marginRight));\n      width += marginLeft + marginRight;\n\n      return width;\n    }\n  \n    this.outerHeight = function(el) {\n      var height = el.offsetHeight;\n      var style = getComputedStyle(el);\n\n      var marginTop = this.negativeToZero(parseInt(style.marginTop));\n      var marginBottom = this.negativeToZero(parseInt(style.marginBottom));\n\n      height += marginTop + marginBottom;\n      return height;\n    }\n  \n    this.nodeListToArray = function (nodelist) {\n      var array = [];\n      for(var elem of nodelist) {\n        array.push(elem);\n      }\n      return array;\n    }\n    \n    this.getCardsInRow = function(wrapper, cards) {\n      return Math.floor(Math.ceil(this.outerWidth(wrapper)) / Math.floor(this.outerWidth(cards[0])));\n    }\n    \n    this.getRowCount = function(cards, cardsInRow) {\n      return Math.ceil(cards.length / cardsInRow);\n    }\n    \n    this.toInteger = function(string) {\n      var int = parseInt(string);\n      return (Number.isNaN(int)) ? 0 : int;\n    }\n    \n    this.didWindowChange = function() {\n      var currentWidth = window.innerWidth;\n      if(this.windowWidth !== currentWidth) {\n        this.windowWidth = currentWidth;\n        return true;\n      } else {\n        return false;\n      }\n    }\n    \n    this.evenAll = function() {\n      if( ! this.wrappers.length) return;\n      if( ! this.didWindowChange()) return;\n      this.wrappers.forEach(function(wrapper){\n        this.evenImages(wrapper);\n      }, this);\n    }\n    \n    this.evenImages = function(wrapper) {\n      var cardIndex = 0;\n      var cardsInRow = 0;\n      var rowsInWrapper = 0;\n      var cards = wrapper.querySelectorAll('.paragraph--type--text-box');\n      \n     \n      cardsInRow = this.getCardsInRow(wrapper, cards);\n      rowsInWrapper = this.getRowCount(cards, cardsInRow);\n\n      // Iterating the rows\n      for(var rowIndex=1; rowIndex<rowsInWrapper+1; rowIndex++) {\n        var cardsOfRow = this.nodeListToArray(cards).slice(cardIndex, ((cardsInRow * rowIndex)));\n        var headingsOfRow = [];\n        var headingHeightsOfRow = [];\n        var highest;\n    \n        // Iterating cards in a row\n        cardsOfRow.forEach(function(elem){ \n          var heading = elem.querySelector('.paragraph__title');\n          headingsOfRow.push(heading);\n          // Reset style so we can recalculate\n          heading.style.height = '';\n          headingHeightsOfRow.push(heading.offsetHeight);\n        }, this);\n  \n        // Getting the highest title\n        highest = headingHeightsOfRow.reduce(function(a, b) {\n          return Math.max(a, b); \n        });\n  \n        // Applying the height to all titles in the row\n        headingsOfRow.forEach(function(elem){\n          elem.style.height = highest + 'px';\n        });\n  \n        cardIndex += cardsInRow;\n      }\n    }\n  };\n\n  /**\n   * Initialise \n   */\n  Drupal.behaviors.equalTitle = {\n    attach: function (context, settings) {\n      if(firstRun) {\n        firstRun = false;\n\n        var even = new Even('.paragraph--type--text-boxes.layout--equal_titles .field--name-parade-paragraphs');\n        var interval = setInterval(function(){\n          even.evenAll();\n        }, 1000);\n      }\n    }\n  };\n\n})(jQuery, Drupal);"]}