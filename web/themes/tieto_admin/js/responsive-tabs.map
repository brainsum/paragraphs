{"version":3,"sources":["../../node_modules/responsive-tabs/js/jquery.responsiveTabs.js","responsive-tabs.js"],"names":["jQuery","responsiveTabs","startCollapsed","animation","duration"],"mappings":"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","file":"responsive-tabs.map","sourceRoot":"..\\src\\js","sourcesContent":[";(function ( $, window, undefined ) {\n\n    /** Default settings */\n    var defaults = {\n        active: null,\n        event: 'click',\n        disabled: [],\n        collapsible: 'accordion',\n        startCollapsed: false,\n        rotate: false,\n        setHash: false,\n        animation: 'default',\n        animationQueue: false,\n        duration: 500,\n        fluidHeight: true,\n        scrollToAccordion: false,\n        scrollToAccordionOnLoad: true,\n        scrollToAccordionOffset: 0,\n        accordionTabElement: '<div></div>',\n        navigationContainer: '',\n        click: function(){},\n        activate: function(){},\n        deactivate: function(){},\n        load: function(){},\n        activateState: function(){},\n        classes: {\n            stateDefault: 'r-tabs-state-default',\n            stateActive: 'r-tabs-state-active',\n            stateDisabled: 'r-tabs-state-disabled',\n            stateExcluded: 'r-tabs-state-excluded',\n            container: 'r-tabs',\n            ul: 'r-tabs-nav',\n            tab: 'r-tabs-tab',\n            anchor: 'r-tabs-anchor',\n            panel: 'r-tabs-panel',\n            accordionTitle: 'r-tabs-accordion-title'\n        }\n    };\n\n    /**\n     * Responsive Tabs\n     * @constructor\n     * @param {object} element - The HTML element the validator should be bound to\n     * @param {object} options - An option map\n     */\n    function ResponsiveTabs(element, options) {\n        this.element = element; // Selected DOM element\n        this.$element = $(element); // Selected jQuery element\n\n        this.tabs = []; // Create tabs array\n        this.state = ''; // Define the plugin state (tabs/accordion)\n        this.rotateInterval = 0; // Define rotate interval\n        this.$queue = $({});\n\n        // Extend the defaults with the passed options\n        this.options = $.extend( {}, defaults, options);\n\n        this.init();\n    }\n\n\n    /**\n     * This function initializes the tab plugin\n     */\n    ResponsiveTabs.prototype.init = function () {\n        var _this = this;\n\n        // Load all the elements\n        this.tabs = this._loadElements();\n        this._loadClasses();\n        this._loadEvents();\n\n        // Window resize bind to check state\n        $(window).on('resize', function(e) {\n            _this._setState(e);\n            if(_this.options.fluidHeight !== true) {\n                _this._equaliseHeights();\n            }\n        });\n\n        // Hashchange event\n        $(window).on('hashchange', function(e) {\n            var tabRef = _this._getTabRefBySelector(window.location.hash);\n            var oTab = _this._getTab(tabRef);\n\n            // Check if a tab is found that matches the hash\n            if(tabRef >= 0 && !oTab._ignoreHashChange && !oTab.disabled) {\n                // If so, open the tab and auto close the current one\n                _this._openTab(e, _this._getTab(tabRef), true);\n            }\n        });\n\n        // Start rotate event if rotate option is defined\n        if(this.options.rotate !== false) {\n            this.startRotation();\n        }\n\n        // Set fluid height\n        if(this.options.fluidHeight !== true) {\n            _this._equaliseHeights();\n        }\n\n        // --------------------\n        // Define plugin events\n        //\n\n        // Activate: this event is called when a tab is selected\n        this.$element.bind('tabs-click', function(e, oTab) {\n            _this.options.click.call(this, e, oTab);\n        });\n\n        // Activate: this event is called when a tab is selected\n        this.$element.bind('tabs-activate', function(e, oTab) {\n            _this.options.activate.call(this, e, oTab);\n        });\n        // Deactivate: this event is called when a tab is closed\n        this.$element.bind('tabs-deactivate', function(e, oTab) {\n            _this.options.deactivate.call(this, e, oTab);\n        });\n        // Activate State: this event is called when the plugin switches states\n        this.$element.bind('tabs-activate-state', function(e, state) {\n            _this.options.activateState.call(this, e, state);\n        });\n\n        // Load: this event is called when the plugin has been loaded\n        this.$element.bind('tabs-load', function(e) {\n            var startTab;\n\n            _this._setState(e); // Set state\n\n            // Check if the panel should be collaped on load\n            if(_this.options.startCollapsed !== true && !(_this.options.startCollapsed === 'accordion' && _this.state === 'accordion')) {\n\n                startTab = _this._getStartTab();\n\n                // Open the initial tab\n                _this._openTab(e, startTab); // Open first tab\n\n                // Call the callback function\n                _this.options.load.call(this, e, startTab); // Call the load callback\n            }\n        });\n        // Trigger loaded event\n        this.$element.trigger('tabs-load');\n    };\n\n    //\n    // PRIVATE FUNCTIONS\n    //\n\n    /**\n     * This function loads the tab elements and stores them in an array\n     * @returns {Array} Array of tab elements\n     */\n    ResponsiveTabs.prototype._loadElements = function() {\n        var _this = this;\n        var $ul = (_this.options.navigationContainer === '') ? this.$element.children('ul:first') : this.$element.find(_this.options.navigationContainer).children('ul:first');\n        var tabs = [];\n        var id = 0;\n\n        // Add the classes to the basic html elements\n        this.$element.addClass(_this.options.classes.container); // Tab container\n        $ul.addClass(_this.options.classes.ul); // List container\n\n        // Get tab buttons and store their data in an array\n        $('li', $ul).each(function() {\n            var $tab = $(this);\n            var isExcluded = $tab.hasClass(_this.options.classes.stateExcluded);\n            var $anchor, $panel, $accordionTab, $accordionAnchor, panelSelector;\n\n            // Check if the tab should be excluded\n            if(!isExcluded) {\n\n                $anchor = $('a', $tab);\n                panelSelector = $anchor.attr('href');\n                $panel = $(panelSelector);\n                $accordionTab = $(_this.options.accordionTabElement).insertBefore($panel);\n                $accordionAnchor = $('<a></a>').attr('href', panelSelector).html($anchor.html()).appendTo($accordionTab);\n\n                var oTab = {\n                    _ignoreHashChange: false,\n                    id: id,\n                    disabled: ($.inArray(id, _this.options.disabled) !== -1),\n                    tab: $(this),\n                    anchor: $('a', $tab),\n                    panel: $panel,\n                    selector: panelSelector,\n                    accordionTab: $accordionTab,\n                    accordionAnchor: $accordionAnchor,\n                    active: false\n                };\n\n                // 1up the ID\n                id++;\n                // Add to tab array\n                tabs.push(oTab);\n            }\n        });\n        return tabs;\n    };\n\n\n    /**\n     * This function adds classes to the tab elements based on the options\n     */\n    ResponsiveTabs.prototype._loadClasses = function() {\n        for (var i=0; i<this.tabs.length; i++) {\n            this.tabs[i].tab.addClass(this.options.classes.stateDefault).addClass(this.options.classes.tab);\n            this.tabs[i].anchor.addClass(this.options.classes.anchor);\n            this.tabs[i].panel.addClass(this.options.classes.stateDefault).addClass(this.options.classes.panel);\n            this.tabs[i].accordionTab.addClass(this.options.classes.accordionTitle);\n            this.tabs[i].accordionAnchor.addClass(this.options.classes.anchor);\n            if(this.tabs[i].disabled) {\n                this.tabs[i].tab.removeClass(this.options.classes.stateDefault).addClass(this.options.classes.stateDisabled);\n                this.tabs[i].accordionTab.removeClass(this.options.classes.stateDefault).addClass(this.options.classes.stateDisabled);\n           }\n        }\n    };\n\n    /**\n     * This function adds events to the tab elements\n     */\n    ResponsiveTabs.prototype._loadEvents = function() {\n        var _this = this;\n\n        // Define activate event on a tab element\n        var fActivate = function(e) {\n            var current = _this._getCurrentTab(); // Fetch current tab\n            var activatedTab = e.data.tab;\n\n            e.preventDefault();\n\n            // Trigger click event for whenever a tab is clicked/touched even if the tab is disabled\n            activatedTab.tab.trigger('tabs-click', activatedTab);\n\n            // Make sure this tab isn't disabled\n            if(!activatedTab.disabled) {\n\n                // Check if hash has to be set in the URL location\n                if(_this.options.setHash) {\n                    // Set the hash using the history api if available to tackle Chromes repaint bug on hash change\n                    if(history.pushState) {\n                        // Fix for missing window.location.origin in IE\n                        if (!window.location.origin) {\n                            window.location.origin = window.location.protocol + \"//\" + window.location.hostname + (window.location.port ? ':' + window.location.port: '');\n                        }\n                        \n                        history.pushState(null, null, window.location.origin + window.location.pathname + window.location.search + activatedTab.selector);\n                    } else {\n                        // Otherwise fallback to the hash update for sites that don't support the history api\n                        window.location.hash = activatedTab.selector;\n                    }\n                }\n\n                e.data.tab._ignoreHashChange = true;\n\n                // Check if the activated tab isnt the current one or if its collapsible. If not, do nothing\n                if(current !== activatedTab || _this._isCollapisble()) {\n                    // The activated tab is either another tab of the current one. If it's the current tab it is collapsible\n                    // Either way, the current tab can be closed\n                    _this._closeTab(e, current);\n\n                    // Check if the activated tab isnt the current one or if it isnt collapsible\n                    if(current !== activatedTab || !_this._isCollapisble()) {\n                        _this._openTab(e, activatedTab, false, true);\n                    }\n                }\n            }\n        };\n\n        // Loop tabs\n        for (var i=0; i<this.tabs.length; i++) {\n            // Add activate function to the tab and accordion selection element\n            this.tabs[i].anchor.on(_this.options.event, {tab: _this.tabs[i]}, fActivate);\n            this.tabs[i].accordionAnchor.on(_this.options.event, {tab: _this.tabs[i]}, fActivate);\n        }\n    };\n\n    /**\n     * This function gets the tab that should be opened at start\n     * @returns {Object} Tab object\n     */\n    ResponsiveTabs.prototype._getStartTab = function() {\n        var tabRef = this._getTabRefBySelector(window.location.hash);\n        var startTab;\n\n        // Check if the page has a hash set that is linked to a tab\n        if(tabRef >= 0 && !this._getTab(tabRef).disabled) {\n            // If so, set the current tab to the linked tab\n            startTab = this._getTab(tabRef);\n        } else if(this.options.active > 0 && !this._getTab(this.options.active).disabled) {\n            startTab = this._getTab(this.options.active);\n        } else {\n            // If not, just get the first one\n            startTab = this._getTab(0);\n        }\n\n        return startTab;\n    };\n\n    /**\n     * This function sets the current state of the plugin\n     * @param {Event} e - The event that triggers the state change\n     */\n    ResponsiveTabs.prototype._setState = function(e) {\n        var $ul = $('ul:first', this.$element);\n        var oldState = this.state;\n        var startCollapsedIsState = (typeof this.options.startCollapsed === 'string');\n        var startTab;\n\n        // The state is based on the visibility of the tabs list\n        if($ul.is(':visible')){\n            // Tab list is visible, so the state is 'tabs'\n            this.state = 'tabs';\n        } else {\n            // Tab list is invisible, so the state is 'accordion'\n            this.state = 'accordion';\n        }\n\n        // If the new state is different from the old state\n        if(this.state !== oldState) {\n            // If so, the state activate trigger must be called\n            this.$element.trigger('tabs-activate-state', {oldState: oldState, newState: this.state});\n\n            // Check if the state switch should open a tab\n            if(oldState && startCollapsedIsState && this.options.startCollapsed !== this.state && this._getCurrentTab() === undefined) {\n                // Get initial tab\n                startTab = this._getStartTab(e);\n                // Open the initial tab\n                this._openTab(e, startTab); // Open first tab\n            }\n        }\n    };\n\n    /**\n     * This function opens a tab\n     * @param {Event} e - The event that triggers the tab opening\n     * @param {Object} oTab - The tab object that should be opened\n     * @param {Boolean} closeCurrent - Defines if the current tab should be closed\n     * @param {Boolean} stopRotation - Defines if the tab rotation loop should be stopped\n     */\n    ResponsiveTabs.prototype._openTab = function(e, oTab, closeCurrent, stopRotation) {\n        var _this = this;\n        var scrollOffset;\n\n        // Check if the current tab has to be closed\n        if(closeCurrent) {\n            this._closeTab(e, this._getCurrentTab());\n        }\n\n        // Check if the rotation has to be stopped when activated\n        if(stopRotation && this.rotateInterval > 0) {\n            this.stopRotation();\n        }\n\n        // Set this tab to active\n        oTab.active = true;\n        // Set active classes to the tab button and accordion tab button\n        oTab.tab.removeClass(_this.options.classes.stateDefault).addClass(_this.options.classes.stateActive);\n        oTab.accordionTab.removeClass(_this.options.classes.stateDefault).addClass(_this.options.classes.stateActive);\n\n        // Run panel transiton\n        _this._doTransition(oTab.panel, _this.options.animation, 'open', function() {\n            var scrollOnLoad = (e.type !== 'tabs-load' || _this.options.scrollToAccordionOnLoad);\n\n            // When finished, set active class to the panel\n            oTab.panel.removeClass(_this.options.classes.stateDefault).addClass(_this.options.classes.stateActive);\n\n            // And if enabled and state is accordion, scroll to the accordion tab\n            if(_this.getState() === 'accordion' && _this.options.scrollToAccordion && (!_this._isInView(oTab.accordionTab) || _this.options.animation !== 'default') && scrollOnLoad) {\n\n                // Add offset element's height to scroll position\n                scrollOffset = oTab.accordionTab.offset().top - _this.options.scrollToAccordionOffset;\n\n                // Check if the animation option is enabled, and if the duration isn't 0\n                if(_this.options.animation !== 'default' && _this.options.duration > 0) {\n                    // If so, set scrollTop with animate and use the 'animation' duration\n                    $('html, body').animate({\n                        scrollTop: scrollOffset\n                    }, _this.options.duration);\n                } else {\n                    //  If not, just set scrollTop\n                    $('html, body').scrollTop(scrollOffset);\n                }\n            }\n        });\n\n        this.$element.trigger('tabs-activate', oTab);\n    };\n\n    /**\n     * This function closes a tab\n     * @param {Event} e - The event that is triggered when a tab is closed\n     * @param {Object} oTab - The tab object that should be closed\n     */\n    ResponsiveTabs.prototype._closeTab = function(e, oTab) {\n        var _this = this;\n        var doQueueOnState = typeof _this.options.animationQueue === 'string';\n        var doQueue;\n\n        if(oTab !== undefined) {\n            if(doQueueOnState && _this.getState() === _this.options.animationQueue) {\n                doQueue = true;\n            } else if(doQueueOnState) {\n                doQueue = false;\n            } else {\n                doQueue = _this.options.animationQueue;\n            }\n\n            // Deactivate tab\n            oTab.active = false;\n            // Set default class to the tab button\n            oTab.tab.removeClass(_this.options.classes.stateActive).addClass(_this.options.classes.stateDefault);\n\n            // Run panel transition\n            _this._doTransition(oTab.panel, _this.options.animation, 'close', function() {\n                // Set default class to the accordion tab button and tab panel\n                oTab.accordionTab.removeClass(_this.options.classes.stateActive).addClass(_this.options.classes.stateDefault);\n                oTab.panel.removeClass(_this.options.classes.stateActive).addClass(_this.options.classes.stateDefault);\n            }, !doQueue);\n\n            this.$element.trigger('tabs-deactivate', oTab);\n        }\n    };\n\n    /**\n     * This function runs an effect on a panel\n     * @param {Element} panel - The HTML element of the tab panel\n     * @param {String} method - The transition method reference\n     * @param {String} state - The state (open/closed) that the panel should transition to\n     * @param {Function} callback - The callback function that is called after the transition\n     * @param {Boolean} dequeue - Defines if the event queue should be dequeued after the transition\n     */\n    ResponsiveTabs.prototype._doTransition = function(panel, method, state, callback, dequeue) {\n        var effect;\n        var _this = this;\n\n        // Get effect based on method\n        switch(method) {\n            case 'slide':\n                effect = (state === 'open') ? 'slideDown' : 'slideUp';\n                break;\n            case 'fade':\n                effect = (state === 'open') ? 'fadeIn' : 'fadeOut';\n                break;\n            default:\n                effect = (state === 'open') ? 'show' : 'hide';\n                // When default is used, set the duration to 0\n                _this.options.duration = 0;\n                break;\n        }\n\n        // Add the transition to a custom queue\n        this.$queue.queue('responsive-tabs',function(next){\n            // Run the transition on the panel\n            panel[effect]({\n                duration: _this.options.duration,\n                complete: function() {\n                    // Call the callback function\n                    callback.call(panel, method, state);\n                    // Run the next function in the queue\n                    next();\n                }\n            });\n        });\n\n        // When the panel is openend, dequeue everything so the animation starts\n        if(state === 'open' || dequeue) {\n            this.$queue.dequeue('responsive-tabs');\n        }\n\n    };\n\n    /**\n     * This function returns the collapsibility of the tab in this state\n     * @returns {Boolean} The collapsibility of the tab\n     */\n    ResponsiveTabs.prototype._isCollapisble = function() {\n        return (typeof this.options.collapsible === 'boolean' && this.options.collapsible) || (typeof this.options.collapsible === 'string' && this.options.collapsible === this.getState());\n    };\n\n    /**\n     * This function returns a tab by numeric reference\n     * @param {Integer} numRef - Numeric tab reference\n     * @returns {Object} Tab object\n     */\n    ResponsiveTabs.prototype._getTab = function(numRef) {\n        return this.tabs[numRef];\n    };\n\n    /**\n     * This function returns the numeric tab reference based on a hash selector\n     * @param {String} selector - Hash selector\n     * @returns {Integer} Numeric tab reference\n     */\n    ResponsiveTabs.prototype._getTabRefBySelector = function(selector) {\n        // Loop all tabs\n        for (var i=0; i<this.tabs.length; i++) {\n            // Check if the hash selector is equal to the tab selector\n            if(this.tabs[i].selector === selector) {\n                return i;\n            }\n        }\n        // If none is found return a negative index\n        return -1;\n    };\n\n    /**\n     * This function returns the current tab element\n     * @returns {Object} Current tab element\n     */\n    ResponsiveTabs.prototype._getCurrentTab = function() {\n        return this._getTab(this._getCurrentTabRef());\n    };\n\n    /**\n     * This function returns the next tab's numeric reference\n     * @param {Integer} currentTabRef - Current numeric tab reference\n     * @returns {Integer} Numeric tab reference\n     */\n    ResponsiveTabs.prototype._getNextTabRef = function(currentTabRef) {\n        var tabRef = (currentTabRef || this._getCurrentTabRef());\n        var nextTabRef = (tabRef === this.tabs.length - 1) ? 0 : tabRef + 1;\n        return (this._getTab(nextTabRef).disabled) ? this._getNextTabRef(nextTabRef) : nextTabRef;\n    };\n\n    /**\n     * This function returns the previous tab's numeric reference\n     * @returns {Integer} Numeric tab reference\n     */\n    ResponsiveTabs.prototype._getPreviousTabRef = function() {\n        return (this._getCurrentTabRef() === 0) ? this.tabs.length - 1 : this._getCurrentTabRef() - 1;\n    };\n\n    /**\n     * This function returns the current tab's numeric reference\n     * @returns {Integer} Numeric tab reference\n     */\n    ResponsiveTabs.prototype._getCurrentTabRef = function() {\n        // Loop all tabs\n        for (var i=0; i<this.tabs.length; i++) {\n            // If this tab is active, return it\n            if(this.tabs[i].active) {\n                return i;\n            }\n        }\n        // No tabs have been found, return negative index\n        return -1;\n    };\n\n    /**\n     * This function gets the tallest tab and applied the height to all tabs\n     */\n    ResponsiveTabs.prototype._equaliseHeights = function() {\n        var maxHeight = 0;\n\n        $.each($.map(this.tabs, function(tab) {\n            maxHeight = Math.max(maxHeight, tab.panel.css('minHeight', '').height());\n            return tab.panel;\n        }), function() {\n            this.css('minHeight', maxHeight);\n        });\n    };\n\n    //\n    // HELPER FUNCTIONS\n    //\n\n    ResponsiveTabs.prototype._isInView = function($element) {\n        var docViewTop = $(window).scrollTop(),\n            docViewBottom = docViewTop + $(window).height(),\n            elemTop = $element.offset().top,\n            elemBottom = elemTop + $element.height();\n        return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));\n    };\n\n    //\n    // PUBLIC FUNCTIONS\n    //\n\n    /**\n     * This function activates a tab\n     * @param {Integer} tabRef - Numeric tab reference\n     * @param {Boolean} stopRotation - Defines if the tab rotation should stop after activation\n     */\n    ResponsiveTabs.prototype.activate = function(tabRef, stopRotation) {\n        var e = jQuery.Event('tabs-activate');\n        var oTab = this._getTab(tabRef);\n        if(!oTab.disabled) {\n            this._openTab(e, oTab, true, stopRotation || true);\n        }\n    };\n\n    /**\n     * This function deactivates a tab\n     * @param {Integer} tabRef - Numeric tab reference\n     */\n    ResponsiveTabs.prototype.deactivate = function(tabRef) {\n        var e = jQuery.Event('tabs-dectivate');\n        var oTab = this._getTab(tabRef);\n        if(!oTab.disabled) {\n            this._closeTab(e, oTab);\n        }\n    };\n\n    /**\n     * This function enables a tab\n     * @param {Integer} tabRef - Numeric tab reference\n     */\n    ResponsiveTabs.prototype.enable = function(tabRef) {\n        var oTab = this._getTab(tabRef);\n        if(oTab){\n            oTab.disabled = false;\n            oTab.tab.addClass(this.options.classes.stateDefault).removeClass(this.options.classes.stateDisabled);\n            oTab.accordionTab.addClass(this.options.classes.stateDefault).removeClass(this.options.classes.stateDisabled);\n        }\n    };\n\n    /**\n     * This function disable a tab\n     * @param {Integer} tabRef - Numeric tab reference\n     */\n    ResponsiveTabs.prototype.disable = function(tabRef) {\n        var oTab = this._getTab(tabRef);\n        if(oTab){\n            oTab.disabled = true;\n            oTab.tab.removeClass(this.options.classes.stateDefault).addClass(this.options.classes.stateDisabled);\n            oTab.accordionTab.removeClass(this.options.classes.stateDefault).addClass(this.options.classes.stateDisabled);\n        }\n    };\n\n    /**\n     * This function gets the current state of the plugin\n     * @returns {String} State of the plugin\n     */\n    ResponsiveTabs.prototype.getState = function() {\n        return this.state;\n    };\n\n    /**\n     * This function starts the rotation of the tabs\n     * @param {Integer} speed - The speed of the rotation\n     */\n    ResponsiveTabs.prototype.startRotation = function(speed) {\n        var _this = this;\n        // Make sure not all tabs are disabled\n        if(this.tabs.length > this.options.disabled.length) {\n            this.rotateInterval = setInterval(function(){\n                var e = jQuery.Event('rotate');\n                _this._openTab(e, _this._getTab(_this._getNextTabRef()), true);\n            }, speed || (($.isNumeric(_this.options.rotate)) ? _this.options.rotate : 4000) );\n        } else {\n            throw new Error(\"Rotation is not possible if all tabs are disabled\");\n        }\n    };\n\n    /**\n     * This function stops the rotation of the tabs\n     */\n    ResponsiveTabs.prototype.stopRotation = function() {\n        window.clearInterval(this.rotateInterval);\n        this.rotateInterval = 0;\n    };\n\n    /**\n     * This function can be used to get/set options\n     * @return {any} Option value\n     */\n    ResponsiveTabs.prototype.option = function(key, value) {\n        if(value) {\n            this.options[key] = value;\n        }\n        return this.options[key];\n    };\n\n    /** jQuery wrapper */\n    $.fn.responsiveTabs = function ( options ) {\n        var args = arguments;\n        var instance;\n\n        if (options === undefined || typeof options === 'object') {\n            return this.each(function () {\n                if (!$.data(this, 'responsivetabs')) {\n                    $.data(this, 'responsivetabs', new ResponsiveTabs( this, options ));\n                }\n            });\n        } else if (typeof options === 'string' && options[0] !== '_' && options !== 'init') {\n            instance = $.data(this[0], 'responsivetabs');\n\n            // Allow instances to be destroyed via the 'destroy' method\n            if (options === 'destroy') {\n                // TODO: destroy instance classes, etc\n                $.data(this, 'responsivetabs', null);\n            }\n\n            if (instance instanceof ResponsiveTabs && typeof instance[options] === 'function') {\n                return instance[options].apply( instance, Array.prototype.slice.call( args, 1 ) );\n            } else {\n                return this;\n            }\n        }\n    };\n\n}(jQuery, window));\n","/**\n * @file\n * Initialize Responsive Tabs scripts.\n */\n\nimport 'responsive-tabs'\n\n($ => {\n\n\t$('.r-tabs-container').responsiveTabs({\n\t  startCollapsed: false,\n\t  animation: 'slide',\n\t  duration: 200\n\t})\n\n})(jQuery)"]}