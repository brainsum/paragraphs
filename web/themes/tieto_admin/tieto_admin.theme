<?php

/**
 * @file
 * Functions to support theming in the tieto_admin theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_theme_registry_alter().
 */
function tieto_admin_theme_registry_alter(&$theme_registry) {
  $theme_registry['marketo_form_field']['path'] = drupal_get_path('theme', 'tieto_admin') . '/templates/fields';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_admin_preprocess_html(&$variables) {
  // Add an extra meta tag for Google Search Console ownership verification.
  $google_search_console_verification = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'google-site-verification',
      'content' => 'b5-5Fdv3WSZb1_PH1oviir4T3LHA_jh_W3uYIzzfjwI',
    ],
  ];
  $variables['page']['#attached']['html_head'][] = [$google_search_console_verification, 'google-site-verification'];

  // If on a node add or edit page, add a node-layout class.
  $path_args = explode('/', Drupal::request()->getPathInfo());
  if ($suggestions = theme_get_suggestions($path_args, 'page', '-')) {
    foreach ($suggestions as $suggestion) {
      if ($suggestion === 'page-node-edit' || strpos($suggestion, 'page-node-add') !== FALSE) {
        $variables['attributes']['class'][] = 'node-form-layout';
      }
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function tieto_admin_preprocess_page(&$vars) {
  $vars['site_name'] = Drupal::config('system.site')->get('name');

  $tietoLogo = [
    'logo_path' => '/' . drupal_get_path('theme', 'tieto_admin') . '/images/tietologo.svg?v2',
    'alt' => t('Tieto'),
    'href' => '//www.tieto.com',
    'dimensions' => [
      'width' => 98,
      'height' => 65,
    ],
  ];

  $vars['tieto_logo'] = $tietoLogo;
}

/**
 * Implements hook_pre_render_HOOK().
 *
 * Use preprocess hook to set #attached to child elements
 * because they will be processed by Twig and drupal_render will
 * be invoked.
 */
function tieto_admin_preprocess_menu_local_tasks(&$variables) {
  if (!empty($variables['primary'])) {
    $variables['primary']['#attached'] = [
      'library' => [
        'tieto_admin/drupal.nav-tabs',
      ],
    ];
  }
  elseif (!empty($variables['secondary'])) {
    $variables['secondary']['#attached'] = [
      'library' => [
        'tieto_admin/drupal.nav-tabs',
      ],
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_admin_preprocess_menu_local_task(&$variables) {
  $variables['attributes']['class'][] = 'tabs__tab';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_admin_preprocess_node_add_list(&$variables) {
  if (!empty($variables['content'])) {
    /** @var Drupal\node\NodeTypeInterface $type */
    foreach ($variables['content'] as $type) {
      $typeId = $type->id();
      $variables['types'][$typeId]['label'] = $type->label();
      $variables['types'][$typeId]['url'] = Url::fromRoute('node.add', ['node_type' => $typeId]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Displays the list of available custom block types for creation, adding
 * separate variables for the label and url.
 */
function tieto_admin_preprocess_block_content_add_list(&$variables) {
  if (!empty($variables['content'])) {
    /** @var \Drupal\node\NodeTypeInterface $type */
    foreach ($variables['content'] as $type) {
      $typeId = $type->id();
      $variables['types'][$typeId]['label'] = $type->label();
      $options = ['query' => Drupal::request()->query->all()];
      $variables['types'][$typeId]['url'] = Url::fromRoute('block_content.add_form', ['block_content_type' => $typeId], $options);
    }
  }
}

/**
 * Implements hook_preprocess_block().
 *
 * Disables contextual links for all blocks.
 */
function tieto_admin_preprocess_block(&$variables) {
  if (isset($variables['title_suffix']['contextual_links'])) {
    unset($variables['title_suffix']['contextual_links'], $variables['elements']['#contextual_links']);
    $variables['attributes']['class'] = array_diff($variables['attributes']['class'], ['contextual-region']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_admin_preprocess_admin_block_content(&$variables) {
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $key => $item) {
      $variables['content'][$key]['url'] = $item['url']->toString();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_admin_preprocess_menu_local_action(array &$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'button--primary';
  $variables['link']['#options']['attributes']['class'][] = 'button--small';

  // We require Modernizr's touch test for button styling.
  $variables['#attached']['library'][] = 'core/modernizr';
}

/**
 * Implements hook_element_info_alter().
 */
function tieto_admin_element_info_alter(&$type) {
  // We require Modernizr for button styling.
  if (isset($type['button'])) {
    $type['button']['#attached']['library'][] = 'core/modernizr';
  }
}

/**
 * Implements hook_preprocess_install_page().
 */
function tieto_admin_preprocess_install_page(&$variables) {
  // tieto_admin has custom styling for the install page.
  $variables['#attached']['library'][] = 'tieto_admin/install-page';
}

/**
 * Implements hook_preprocess_maintenance_page().
 */
function tieto_admin_preprocess_maintenance_page(&$variables) {
  // tieto_admin has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'tieto_admin/maintenance-page';
}

// @codingStandardsIgnoreStart
/**
 * Implements hook_form_alter().
 *
 * // @codingStandardsIgnoreEnd
 */
function tieto_admin_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'user_login_form') {
    $form['pass']['#suffix'] = Link::createFromRoute(
      t('Reset your password'),
      'user.pass',
      [],
      [
        'attributes' => [
          'class' => [
            'reset-password-link',
          ],
        ],
      ]
    )->toString()->getGeneratedLink();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Changes vertical tabs to container and adds meta information
 * and attach custom tabledrag library on campaign edit forms.
 */
function tieto_admin_form_node_form_alter(&$form, FormStateInterface $form_state) {
  /** @var Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();

  $form['#theme'] = ['node_edit_form'];
  $form['#attached']['library'][] = 'tieto_admin/node-form';

  $form['advanced']['#type'] = 'container';
  $is_new = !$node->isNew() ? \Drupal::service('date.formatter')->format($node->getChangedTime(), 'short') : t('Not saved yet');
  $form['meta'] = [
    '#attributes' => ['class' => ['entity-meta__header']],
    '#type' => 'container',
    '#group' => 'advanced',
    '#weight' => -100,
    'published' => [
      '#type' => 'html_tag',
      '#tag' => 'h3',
      '#value' => $node->isPublished() ? t('Published') : t('Not published'),
      '#access' => !$node->isNew(),
      '#attributes' => [
        'class' => 'entity-meta__title',
      ],
    ],
    'changed' => [
      '#type' => 'item',
      '#wrapper_attributes' => ['class' => ['entity-meta__last-saved', 'container-inline']],
      '#markup' => '<h4 class="label inline">' . t('Last saved') . '</h4> ' . $is_new,
    ],
    'author' => [
      '#type' => 'item',
      '#wrapper_attributes' => ['class' => ['author', 'container-inline']],
      '#markup' => '<h4 class="label inline">' . t('Author') . '</h4> ' . $node->getOwner()->getDisplayName(),
    ],
  ];
  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function tieto_admin_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // @todo @fixme
  if (\in_array('page__node__campaign', $suggestions)) {
    $suggestions[] = 'page__node__campaign__revisions';
  }

  // Set 40x template suggestions.
  // @see https://www.drupal.org/node/2363987.
  $http_error_suggestions = [
    'system.403' => 'page__system__403',
    'system.404' => 'page__system__404',
  ];

  $route_name = \Drupal::routeMatch()->getRouteName();
  if (isset($http_error_suggestions[$route_name])) {
    $suggestions[] = $http_error_suggestions[$route_name];
  }

  return $suggestions;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_admin_preprocess_paragraph__header(&$variables) {
  // @todo - maybe enable only on the node view page.
  if ('entity.node.latest_version' !== \Drupal::routeMatch()->getRouteName()) {
    $variables['#attached']['library'][] = 'tieto_admin/flying_cta';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_admin_preprocess_details(&$variables) {
  if (isset($variables['title']['#markup'])) {
    $variables['title'] = strip_tags($variables['title']['#markup']);
  }
  else {
    $variables['title'] = strip_tags($variables['title']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Switch link block image style based on the row's block size setting.
 */
function tieto_admin_preprocess_field__paragraph__parade_image__text_box(&$variables) {
  // @todo: Refactor needed for the new layout (determine hook name).
  // Get paragraph object field is attached to.
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['element']['#object'];

  // Get parent link blocks item.
  /** @var \Drupal\paragraphs\Entity\Paragraph $parent */

  $parent = $paragraph->getParentEntity();
  if (
    method_exists($parent, 'getType') &&
    $parent->getType() === 'text_boxes' &&
    in_array($parent->get('parade_layout')->target_id, [
      'layout_rounded_image',
      'layout_contacts',
    ], TRUE)
  ) {
    $variables['items'][0]['content']['#image_style'] = 'square_350x350';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_admin_preprocess_field__parade_call_to_action(&$variables) {
  $classes = ['button', 'button--primary'];
  foreach ($variables['items'] as $key => $link) {
    $variables['items'][$key]['content']['#options']['attributes']['class'] = $classes;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_admin_preprocess_field__paragraph__parade_call_to_action(&$variables) {
  $classes = ['button', 'button--primary'];
  foreach ($variables['items'] as $key => $link) {
    $variables['items'][$key]['content']['#options']['attributes']['class'] = $classes;
  }
}
