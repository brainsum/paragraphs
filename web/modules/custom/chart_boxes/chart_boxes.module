<?php

/**
 * @file
 * Chart boxes module file.
 */

use Drupal\Component\Utility\Random;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function chart_boxes_theme() {
  return [
    'paragraph__chart_box' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__chart_boxes' => [
      'base hook' => 'paragraph',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function chart_boxes_preprocess_paragraph__chart_box(&$variables) {
  /** @var Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = &$variables['paragraph'];

  /** @var Drupal\paragraphs\Entity\Paragraph $parent */
  $parent = $paragraph->getParentEntity();

  // Pass the number of Columns field value.
  if (method_exists($parent, 'hasField') && $parent->hasField('parade_boxes_per_row') && ($columns = $parent->get('parade_boxes_per_row')->value)) {
    _parade_add_template_variable($variables, [
      'columns' => $columns,
    ]);
  }
  $variables['paragraph_id'] = $paragraph->id();
  $variables['#attached']['drupalSettings']['chart_boxes']['paragraph_id'] = $paragraph->id();
  $variables['add_pie'] = $paragraph->get('parade_with_pie')->value;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function chart_boxes_preprocess_paragraph__chart_boxes(&$variables) {
  /** @var Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = &$variables['paragraph'];

  // Pass the number of Columns field value.
  if ($columns = $paragraph->get('parade_boxes_per_row')->value) {
    _parade_add_template_variable($variables, [
      'columns' => $columns,
    ]);
  }
  $variables['paragraph_id'] = $paragraph->id();
  $variables['#attached']['drupalSettings']['chart_boxes']['paragraph_id'] = $paragraph->id();
  $variables['descriptions'] = [];
  if ($variables['view_mode'] !== 'preview') {
    foreach ($variables['content']['parade_paragraphs'] as $delta => $data) {
      if (is_numeric($delta)) {
        /** @var \Drupal\paragraphs\Entity\Paragraph $box */
        $box = $data['#paragraph'];
        $variables['descriptions'][] = $box->get('parade_text')->value;
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function chart_boxes_preprocess_paragraph(&$variables) {
  /** @var Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = &$variables['paragraph'];

  if ($variables['view_mode'] !== 'preview' && method_exists($paragraph, 'getType') && 'chart_boxes' === $paragraph->getType()) {
    // Attach libraries for each paragraph type.
    $variables['#attached']['library'][] = 'chart_boxes/paragraphs.chart_boxes';
    $variables['#attached']['library'][] = 'chart_boxes/paragraphs.doughnut_chart';
    $variables['#attached']['library'][] = 'chart_boxes/paragraphs.doughnut_text_chart';
    $variables['#attached']['library'][] = 'chart_boxes/paragraphs.horizontal_bar_chart';
  }
}

/**
 * Implements hook_form_alter().
 */
function chart_boxes_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['field_paragraphs'])) {
    $form['#attached']['library'][] = 'chart_boxes/paragraphs.chart_boxes_admin';

    foreach ($form['field_paragraphs']['widget'] as $delta => &$value) {
      if (
        is_numeric($delta)
        && is_array($value)
        && isset($value['subform']['parade_paragraphs'])
        && array_key_exists('layout_doughnut_and_text_chart', $value['subform']['parade_layout']['widget']['#options'])
      ) {
        $layoutHelperClass = 'parade-layout-states-help-' . (new Random())->name(10, TRUE);
        $value['subform']['parade_layout']['#attributes']['class'][] = $layoutHelperClass;
        // Only show this field when the
        // 'layout_doughnut_and_text_chart' value is selected.
        $visibleAccordingToLayout = [
          'visible' => [
            ".$layoutHelperClass select" => ['value' => 'layout_doughnut_and_text_chart'],
          ],
        ];
        $value['subform']['parade_boxes_per_row']['#states'] = $visibleAccordingToLayout;
        foreach ($value['subform']['parade_paragraphs']['widget'] as $subDelta => &$subValue) {
          if (is_numeric($subDelta) && is_array($subValue) && isset($subValue['subform']['parade_with_pie'])) {
            $subValue['subform']['parade_with_pie']['#states'] = $visibleAccordingToLayout;

            // @see: TCS-351; If 'With pie' is checked, make the 'Label' inactive.
            if (isset($subValue['subform']['parade_with_pie']['widget']['value'])) {
              $pieHelperClass = 'parade-with-pie-states-help-' . (new Random())->name(10, TRUE);
              $subValue['subform']['parade_with_pie']['widget']['value']['#attributes']['class'][] = $pieHelperClass;

              if (isset($subValue['subform']['parade_title'])) {
                $subValue['subform']['parade_title']['#states'] = [
                  'disabled' => [
                    ".$pieHelperClass" => ['checked' => TRUE],
                  ],
                ];
              }
            }
          }
        }
        unset($subValue);
      }
    }
    unset($value);
  }
}
