<?php

/**
 * @file
 * Code for campaign_pages module.
 */

use Drupal\campaign_pages\Handler\ScheduledUpdateListBuilder;
use Drupal\Component\Utility\Random;
use Drupal\Core\Render\Markup;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Datetime\Element\Datetime;
use Drupal\Core\Url;
use Drupal\Core\Utility\Error;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\imagemagick\Plugin\ImageToolkit\ImagemagickToolkit;
use Drupal\node\NodeInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Drupal\user\Entity\User;

/**
 * Implements hook_help().
 */
function campaign_pages_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the campain_pages module.
    case 'help.page.campaign_pages':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Campaign pages functionality') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function campaign_pages_theme($existing, $type, $theme, $path) {
  return [
    'field__paragraph__parade_paragraphs__text_boxes' => [
      'base hook' => 'paragraph',
    ],
  ];
}

/**
 * Implements hook_field_widget_form_alter().
 */
function campaign_pages_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  // @fixme check for field Type, not name.
  $field_name = $context['items']->getFieldDefinition()->getName();

  if ($field_name === 'call_to_action' || $field_name === 'parade_call_to_action') {
    $element['title']['#maxlength'] = 32;
  }

  // Remove scheduled updates date description.
  if ($field_name === 'update_timestamp' && isset($context['form']['#entity_type']) && $context['form']['#entity_type'] === 'scheduled_update') {
    $element['value']['#description'] = t('Format: %format.', ['%format' => Datetime::formatExample('Y.m.d. - H:i:s')]);
  }

  // Hide empty scheduled updates field if user doesn't have create permission.
  if (($field_name === 'moderation_state_publish' && !isset($element['entities'][0]) && !\Drupal::currentUser()->hasPermission('create moderation_publish scheduled updates'))
  || ($field_name === 'moderation_state_archive' && !isset($element['entities'][0]) && !\Drupal::currentUser()->hasPermission('create moderation_archive scheduled updates'))) {
    $element['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_alter().
 */
function campaign_pages_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['node_campaign_form', 'node_campaign_edit_form'], TRUE)) {
    // Menu: Change wording of Add more button.
    $form['parade_onepage_menu']['widget']['add_more']['#value'] = t('New menu link');

    /** @var \Drupal\node\NodeForm $nodeFormObject */
    $nodeFormObject = $form_state->getFormObject();
    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $formDisplay */
    $formDisplay = $nodeFormObject->getFormDisplay($form_state);

    if (NULL !== $formDisplay) {
      // Removes the "Add" word from the button values.
      $settings = $formDisplay->getComponent('parade_onepage_sections')['settings'];
      if ($settings['add_mode'] === 'button') {
        if (isset($form['parade_onepage_sections']['widget']['add_more'])) {
          foreach ($form['parade_onepage_sections']['widget']['add_more'] as $key => &$item) {
            if (strpos($key, 'add_more_button_') === 0) {
              // Adding a context, so it's translatable separately.
              $options = ['context' => 'add_paragraph_type'];
              $item['#value'] = t(
                '@type',
                ['@type' => $item['#value']],
                $options
              );
            }
          }
          unset($item);
        }
      }
    }

    // Set custom redirection callback to stay on the node form after submit.
    if (isset($form['actions']['submit'])) {
      $form['actions']['submit']['#submit'][] = '_campaign_pages_disable_form_redirect';
    }

    if (isset($form['parade_onepage_sections'])) {
      // @see TCS-361 | Hide color field for text&image
      // when layout is not text1st_enhanced.
      foreach ($form['parade_onepage_sections']['widget'] as $delta => &$item) {
        if (
          is_numeric($delta)
          && is_array($item)
          && isset($item['subform']['#cache']['tags'])
        ) {
          foreach ($item['subform']['#cache']['tags'] as $tag) {
            // If there are image_text cache tags, it's an image_text type.
            // @todo: Fix this, we should have a more stable condition.
            if (FALSE !== strpos($tag, 'image_text')) {
              $layoutHelperClass = 'parade-layout-states-help-' . (new Random())->name(10, TRUE);
              $item['subform']['parade_layout']['#attributes']['class'][] = $layoutHelperClass;

              $layoutCondition = [".$layoutHelperClass select" => ['value' => 'layout_text_1st_enhanced']];
              $visibleAccordingToLayout = [
                'visible' => $layoutCondition,
              ];
              $item['subform']['parade_color_scheme']['#states'] = $visibleAccordingToLayout;

              // Just skip to the next widget.
              continue 2;
            }
          }
        }
      }
      unset($item);
    }
  }

  // Set the default domain for Domain Source field if it's empty.
  if ($form_id === 'node_campaign_edit_form') {
    if (isset($form['field_domain_source']) && empty($form['field_domain_source']['widget']['#default_value'])) {
      $domain_storage = \Drupal::entityTypeManager()->getStorage('domain');
      $form['field_domain_source']['widget']['#default_value'] = [$domain_storage->loadDefaultId()];
    }
  }

}

/**
 * Implements hook_element_info_alter().
 *
 * Add element afterbuild for 'container' type - the paragraphs reference
 * subform element.
 *
 * @see parade_conditional_fields_element_after_build()
 */
function campaign_pages_element_info_alter(array &$types) {
  $types['container']['#after_build'][] = 'campaign_pages_element_after_build';
}

/**
 * Add paragraphs bundle machine name to subform wrapper as class.
 */
function campaign_pages_element_after_build($element, FormStateInterface $form_state) {
  if (isset($element['subform'], $element['top']['paragraph_type_title'])) {
    // Add paragraphs bundle machine name to wrapper as class.
    $elementEntity = $form_state->getStorage()['field_storage']['#parents']['#fields']['parade_onepage_sections']['paragraphs'][$element['#weight']]['entity'];
    if (!empty($elementEntity) && \method_exists($elementEntity, 'getType')) {
      $bundle = $elementEntity->getType();
      $element['#prefix'] = \str_replace('<div ', '<div class="paragraphs-wrapper-bundle-' . $bundle . '" ', $element['#prefix']);
    }
  }
  return $element;
}

/**
 * Custom redirect for Campaign node submit.
 *
 * @param array &$form
 *   The form build array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state interface.
 */
function _campaign_pages_disable_form_redirect(array &$form, FormStateInterface $form_state) {
  // Sadly $form_state->disableRedirect() not works as expected, so we also
  // need to redirect to the edit form.
  $nid = $form_state->getValue('nid');
  $form_state->setRedirect('entity.node.edit_form', ['node' => $nid]);
}

/**
 * Implements hook_entity_operation_alter().
 */
function campaign_pages_entity_operation_alter(array &$operations, EntityInterface $entity) {
  // Remove `destination` URL query parameter on Operations
  // dropbutton for Campaign type nodes.
  if (method_exists($entity, 'getType') && $entity->getType() === 'campaign') {
    foreach ($operations as $operation => $data) {
      if (isset($data['query']['destination'])) {
        unset($operations[$operation]['query']['destination']);
      }
    }
  }
}

/**
 * Implements hook_leaflet_map_info_alter().
 */
function campaign_pages_leaflet_map_info_alter(array &$map_info) {
  // @todo: Maybe use map_info hook and add it as a custom one, not altering the existing.
  // Alter default leaflet map so it displays in black and white.
  if (isset($map_info['OSM Mapnik'])) {
    $map_info['OSM Mapnik']['layers']['earth']['urlTemplate'] = 'http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png';
    $map_info['OSM Mapnik']['icon'] = [
      // Marker has 25 : 41 aspect ratio.
      'iconUrl' => '/' . drupal_get_path('module', 'campaign_pages') . '/images/marker-icon-2x_new.png',
      'iconSize' => [
        // Width.
        'x' => '25',
        // Height.
        'y' => '41',
      ],
      // This is inverted, meaning 12 translates to -12, -12 to 12.
      'iconAnchor' => [
        // Margin left.
        'x' => '12',
        // Margin right.
        'y' => '41',
      ],
      'popupAnchor' => [
        'x' => '0',
        'y' => '-30',
      ],
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function campaign_pages_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  $form['#submit'][] = 'campaign_pages_user_login_submit';
}

/**
 * Form submission handler for user_login_form().
 *
 * Redirects the user to the dashboard after logging in.
 */
function campaign_pages_user_login_submit(&$form, FormStateInterface $form_state) {
  $url = Url::fromUri('internal:/admin/content');

  // Check if a destination was set, probably on an exception controller.
  // @see \Drupal\user\Form\UserLoginForm::submitForm()
  $request = \Drupal::service('request_stack')->getCurrentRequest();
  if (!$request->request->has('destination')) {
    $form_state->setRedirectUrl($url);
  }
  else {
    $request->query->set('destination', $request->request->get('destination'));
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function campaign_pages_entity_type_alter(array &$entity_types) {
  if (NULL !== $entity_types['scheduled_update'] && method_exists($entity_types['scheduled_update'], 'setListBuilderClass')) {
    $entity_types['scheduled_update']->setListBuilderClass(ScheduledUpdateListBuilder::class);
  }
  // Disable non-translatable fields constraint added in 8.5.0.
  foreach (['node', 'paragraph'] as $type) {
    $constraints = $entity_types[$type]->getConstraints();
    unset($constraints['EntityUntranslatableFields']);
    $entity_types[$type]->setConstraints($constraints);
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Log paragraph entity deletion.
 */
function campaign_pages_entity_delete($entity) {
  if ($entity->getEntityTypeId() === 'paragraph') {
    \Drupal::logger('campaign_pages')->info('Deleted paragraph ID: ' . $entity->id());
    \Drupal::logger('campaign_pages')->debug('Deleted paragraph backtrace: ' . Error::formatBacktrace(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function campaign_pages_node_presave(NodeInterface $node) {
  // The machine name should be unique.
  // This is important as node_clone will skip the validation,
  // but non-unique machine names will break the scheduled updates.
  // Note, we only care about the latest revision.
  /** @var \Drupal\campaign_pages\Service\OnepageIdAutoincrement $onepageIdService */
  $onepageIdService = \Drupal::service('campaign_pages.onepage_id_autoincrement');
  $onepageIdService->doIncrement($node);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function campaign_pages_preprocess_status_messages(&$variables) {
  // @see TCS-310.
  // Only execute this code for the scheduled update list route.
  // @note: If we get redirected somewhere else, the str_replace won't work.
  if (FALSE !== strpos(\Drupal::routeMatch()->getRouteName(), 'entity.scheduled_update.collection')) {
    $type = 'status';
    if (isset($variables['message_list'][$type])) {
      $updateTypes = \Drupal::entityTypeManager()->getStorage('scheduled_update_type')->loadMultiple();
      /** @var \Drupal\Core\Render\Markup $message */
      foreach ($variables['message_list'][$type] as &$message) {
        $text = $message->__toString();
        /** @var \Drupal\scheduled_updates\ScheduledUpdateTypeInterface $updateType */
        foreach ($updateTypes as $machineName => $updateType) {
          // If node__moderation_state comes first, but the message contains
          // node__moderation_state_1, then we'd get 'Scheduled update:_1'.
          // So our strpos search includes the closing ':'.
          $searchText = 'content ' . $machineName . ':';
          if (FALSE !== strpos($text, $searchText)) {
            $replacement = 'Scheduled update:';
            $text = str_replace($searchText, $replacement, $text);
            $message = Markup::create($text);
            break;
          }
        }
      }
      unset($message);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function campaign_pages_preprocess_paragraph(&$variables) {
  /** @var Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = &$variables['paragraph'];

  if (!(method_exists($paragraph, 'getType') && method_exists($paragraph, 'hasField'))) {
    return;
  }

  // Parallax and background stuff for Header and Parallax types.
  // Code from parade. Apply parade_full_hd_width style for
  // header and parallax parade_background fields, if they contain an image.
  if (
    $paragraph->hasField('parade_background') &&
    in_array($paragraph->getType(), ['header', 'parallax'], FALSE)
  ) {
    $target_id = $paragraph->get('parade_background')->target_id;
    if (!$target_id) {
      return;
    }

    // Get background file info.
    $file = File::load($target_id);
    if (NULL !== $file) {
      $file_uri = $file->getFileUri();
      $file_mime = $file->getMimeType();

      // Compress images with an image style.
      if ($file_mime === 'image/jpeg') {
        /** @var Drupal\image\Entity\ImageStyle $style */
        $style = ImageStyle::load('parade_full_hd_width');

        if (NULL === $style) {
          return;
        }

        $variables['parade']['background']['url'] = $style->buildUrl($file_uri);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Set classes for node clone form.
 */
function campaign_pages_preprocess_html(&$variables) {
  // Add custom class to body for node add/edit page.
  // @todo css refactor needed - custom class instead of node type class.
  $route_name = \Drupal::request()->attributes->get('_route');
  $route_match = \Drupal::routeMatch();
  $type = NULL;
  if ('node_clone.prepopulate_node' === $route_name) {
    $type = $route_match->getParameter('node')->getType();
  }
  if ($type) {
    $bundles = \array_keys(\Drupal::config('parade_demo.settings')->get('bundles'));
    if (\in_array($type, $bundles)) {
      $variables['attributes']['class'][] = 'page-node-type-parade-onepage';

      $path_args = \explode('/', Drupal::request()->getPathInfo());
      if ($suggestions = \theme_get_suggestions($path_args, 'page', '-')) {
        foreach ($suggestions as $suggestion) {
          if ($suggestion === 'page--node-clone-prepopulate') {
            $variables['attributes']['class'][] = 'layout-container';
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function campaign_pages_form_node_campaign_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $routeName = \Drupal::request()->attributes->get('_route');
  if ('node_clone.prepopulate_node' === $routeName) {
    $userStorage = \Drupal::entityTypeManager()->getStorage('user');
    $form['uid']['widget']['0']['target_id']['#default_value'] = $userStorage->load(\Drupal::currentUser()->id());
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Attach path specific js to page based on config.
 *
 * Add config to settings.php
 * $config['campaign_pages']['path_specific_js'] = [
 *   '/node/157' => [
 *     '/sites/default/files/my_custom_js_for_node_157.js',
 *     'http://example.com/my_custom_external_additional_js_for_node_157.js'
 *   ],
 *   '/node/243' => [
 *     '/private_files/my_custom_js_for_node_243.js'
 *   ],
 * ];
 */
function campaign_pages_page_attachments(array &$attachments) {
  $config = Drupal::config('campaign_pages')->get('path_specific_js', []);
  if (!$config) {
    return;
  }

  $request = Drupal::requestStack()->getCurrentRequest();
  // Compare the lowercase path alias (if any) and internal path.
  $currentPath = Drupal::service('path.current')->getPath($request);
  // Do not trim a trailing slash if that is the complete path.
  $currentPath = $currentPath === '/' ? $currentPath : rtrim($currentPath, '/');
  $currentPathAlias = mb_strtolower(Drupal::service('path.alias_manager')->getAliasByPath($currentPath));

  if ($prefixes = \Drupal::config('language.negotiation')->get('url.prefixes')) {
    $currentLangcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $currentPathAlias = $prefixes[$currentLangcode] ? '/' . $prefixes[$currentLangcode] . $currentPathAlias : $currentPathAlias;
  }

  $pathMatcher = Drupal::service('path.matcher');
  foreach ($config as $path => $scripts) {
    $path = mb_strtolower($path);
    if ($pathMatcher->matchPath($currentPathAlias, $path) || ($currentPath !== $currentPathAlias && $pathMatcher->matchPath($currentPath, $path))) {
      foreach ($scripts as $id => $script) {
        $attachments['#attached']['html_head'][] = [
          [
            '#tag' => 'script',
            '#attributes' => [
              'src' => $script,
            ],
          ],
          'path_specific_js_' . $id,
        ];
      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function campaign_pages_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  // TCS-697 - Alter the view joins to get the Last edited by user from
  // revisions which are not drafts.
  if ($view->id() === 'content' &&  $view->current_display === 'page_1') {

    // LEFT JOIN (
    //   SELECT nfr.nid, MAX(nfr.vid) AS vid, nfr.langcode
    //   FROM node_field_revision nfr
    //   WHERE nfr.revision_translation_affected = 1
    //   AND nfr.moderation_state != 'draft'
    //   GROUP BY nfr.langcode, nfr.nid
    //   ) max_rev ON nfd.nid = max_rev.nid AND nfd.langcode = max_rev.langcode.
    $subQuery = \Drupal::database()->select('node_field_revision', 'nfr');
    $subQuery->fields('nfr', ['nid', 'langcode']);
    $subQuery->addExpression('MAX(nfr.vid)', 'vid');
    $subQuery->condition('nfr.revision_translation_affected', 1, '=');
    $subQuery->condition('nfr.moderation_state', 'draft', '!=');
    $subQuery->groupBy('nfr.nid');
    $subQuery->groupBy('nfr.langcode');

    $configuration = [
      'type' => 'LEFT',
      'table' => $subQuery,
      'field' => 'nid',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'operator' => '=',
      'extra' => [
        0 => [
          'left_field' => 'langcode',
          'field' => 'langcode',
        ],
      ],
    ];
    $join = Views::pluginManager('join')->createInstance('standard', $configuration);

    // Do the actual join.
    $queryTables = &$query->getTableQueue();
    $queryTables['max_rev'] = [
      'alias' => 'max_rev',
      'table' => $subQuery,
      'relationship' => 'node_field_data',
      'join' => $join,
    ];

    // LEFT JOIN node_revision nr ON max_rev.nid = nr.nid
    // AND max_rev.vid = nr.vid.
    $configuration = [
      'type' => 'LEFT',
      'table' => 'node_revision',
      'field' => 'nid',
      'left_table' => 'max_rev',
      'left_field' => 'nid',
      'operator' => '=',
      'extra' => [
        0 => [
          'left_field' => 'vid',
          'field' => 'vid',
        ],
      ],
    ];
    $join = Views::pluginManager('join')->createInstance('standard', $configuration);

    // Do the actual join.
    $queryTables['node_revision'] = [
      'alias' => 'node_revision',
      'table' => $subQuery,
      'relationship' => 'max_review',
      'join' => $join,
    ];

    // LEFT JOIN users_field_data ufd1 ON nr.revision_uid = ufd1.uid.
    $configuration = [
      'type' => 'LEFT',
      'table' => 'users_field_data',
      'field' => 'uid',
      'left_table' => 'node_revision',
      'left_field' => 'revision_uid',
      'operator' => '=',
    ];
    $join = Views::pluginManager('join')->createInstance('standard', $configuration);

    // Do the actual join.
    $queryTables['users_field_data'] = [
      'alias' => 'users_field_data',
      'table' => 'node_revision',
      'relationship' => 'node_revision',
      'join' => $join,
    ];

    $query->addField('users_field_data', 'name', 'revision_user');
    $query->addField('users_field_data', 'uid', 'revision_uid');
  }
}

/**
 * Implements hook__views_post_execute().
 */
function campaign_pages_views_post_execute(ViewExecutable $view) {
  if ($view->id() === 'content' &&  $view->current_display === 'page_1') {

    // TCS-697 - Replace the Last edited by field values to the revision user.
    foreach ($view->result as $key => $value) {
      if ($value->revision_uid) {
        $user = User::load($value->revision_uid);
        $view->result[$key]->_relationship_entities['uid'] = $user;
      }
      else {
        $view->result[$key]->_relationship_entities['uid'] = NULL;
      }
    }
  }
}
