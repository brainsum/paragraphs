<?php

/**
 * @file
 * Code for campaign_pages module's install hooks.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Config\FileStorage;

/**
 * Delete non-existing files from database.
 */
function campaign_pages_update_8001(&$sandbox) {
  // Query and load all File entities.
  $query = Drupal::entityQuery('file');
  $file_ids = $query->execute();
  $files = file_load_multiple($file_ids);

  // Delete those which don't exist.
  foreach ($files as $file) {
    $uri = $file->uri->value;
    if (!file_exists($uri)) {
      file_delete($file->fid->value);
    }
  }
}

/**
 * Append data-selected attributes to field_menu options.
 */
function campaign_pages_update_8002() {
  $nodeType = 'Campaign';
  $attribute = 'data-selected';

  $all_nids = \Drupal::entityQuery('node')
    ->condition('type', $nodeType)
    ->allRevisions()
    ->execute();

  $all_nids = array_keys($all_nids);

  foreach ($all_nids as $nid) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->loadRevision(
      $nid
    );

    $fieldMenu = $node->get('field_menu');
    $fieldMenuValue = $fieldMenu->getValue();

    $lastDelta = count($fieldMenu) - 1;

    foreach ($fieldMenuValue as $delta => &$item) {
      if (!isset($item['options']['attributes'][$attribute])) {
        $item['options']['attributes'][$attribute] = (($delta === $lastDelta) ? 1 : 0);
      }
    }

    $node->get('field_menu')->setValue($fieldMenuValue);

    $node->save();
  }
}

/**
 * Removes system.schema of deprecated language_switcher module.
 */
function campaign_pages_update_8003() {
  Database::getConnection()->query("DELETE FROM key_value WHERE collection='system.schema' AND name='language_switcher';");
}

/**
 * Fix imageapi_optimize.processor.local_binaries - advdpng to advpng.
 */
function campaign_pages_update_8004() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('imageapi_optimize.processor.local_binaries');
  $processors = $config->get('processors');
  $processors['0a8a85c1-2ccc-4cde-844c-97a7588f006c']['id'] = 'advpng';
  $config->set('processors', $processors);
  $config->save(TRUE);
}

/**
 * Delete removed modules (devel, kint, php_ffmpeg).
 */
function campaign_pages_update_8005() {
  $modules_to_delete = [
    'devel',
    'kint',
    'php_ffmpeg',
  ];

  foreach ($modules_to_delete as $module_name) {
    if (!file_exists('./modules/contrib/' . $module_name)) {
      $query = \Drupal::database()->delete('key_value')
        ->condition('collection', 'system.schema')
        ->condition('name', $module_name)
        ->execute();
    }
  }
}

/**
 * Enable 'view_mode_selector' module.
 */
function campaign_pages_update_8006() {
  $modules = ['view_mode_selector'];
  \Drupal::service('module_installer')->install($modules, TRUE);
}

/**
 * Upgrade from parade-1.x to parade-2.x.
 */
function campaign_pages_update_8007() {
  field_purge_batch(100);

  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $updateManager */
  $updateManager = \Drupal::entityDefinitionUpdateManager();
  // Apply pending updates..
  if ($updateManager->needsUpdates()) {
    $updateManager->applyUpdates();
  }

  // Import new parade fields from sync directory.
  _campaign_pages_import_parade_fields();

  field_purge_batch(100);

  // Install new fields..
  if ($updateManager->needsUpdates()) {
    $updateManager->applyUpdates();
  }
}

/**
 * Import new parade fields from sync directory.
 */
function _campaign_pages_import_parade_fields() {
  $projectConfigPath = config_get_config_directory(CONFIG_SYNC_DIRECTORY);
  $source = new FileStorage($projectConfigPath);
  $configStorage = \Drupal::service('config.storage');

  $configs = [
//    'field.storage.node.parade_machine_name',
//    'field.storage.node.parade_onepage_sections',
//
//    'field.field.node.campaign.parade_machine_name',
//    'field.field.node.campaign.parade_onepage_sections',


    'field.storage.paragraph.parade_anchor',
    'field.storage.paragraph.parade_background',
    'field.storage.paragraph.parade_boxes_per_row',
    'field.storage.paragraph.parade_call_to_action',
    'field.storage.paragraph.parade_color_scheme',
    'field.storage.paragraph.parade_enable_confirm_message',
    'field.storage.paragraph.parade_enable_linkedin_autofill',
    'field.storage.paragraph.parade_enable_parallax',
    'field.storage.paragraph.parade_geofield',
    'field.storage.paragraph.parade_image',
    'field.storage.paragraph.parade_images',
    'field.storage.paragraph.parade_input_label',
    'field.storage.paragraph.parade_layout',
    'field.storage.paragraph.parade_lead_text',
    'field.storage.paragraph.parade_location',
    'field.storage.paragraph.parade_marketo_form',
    'field.storage.paragraph.parade_marketo_poll',
    'field.storage.paragraph.parade_minimum_height',
    'field.storage.paragraph.parade_paragraphs',
    'field.storage.paragraph.parade_result_label',
    'field.storage.paragraph.parade_secondary_title',
    'field.storage.paragraph.parade_social_link',
    'field.storage.paragraph.parade_text',
    'field.storage.paragraph.parade_title',
    'field.storage.paragraph.parade_twitter_feed',
    'field.storage.paragraph.parade_value',
    'field.storage.paragraph.parade_view_mode',

    'field.field.paragraph.header.parade_anchor',
    'field.field.paragraph.header.parade_background',
    'field.field.paragraph.header.parade_call_to_action',
    'field.field.paragraph.header.parade_color_scheme',
    'field.field.paragraph.header.parade_enable_parallax',
    'field.field.paragraph.header.parade_lead_text',
    'field.field.paragraph.header.parade_secondary_title',
    'field.field.paragraph.header.parade_title',
    'field.field.paragraph.image_text.parade_anchor',
    'field.field.paragraph.image_text.parade_call_to_action',
    'field.field.paragraph.image_text.parade_color_scheme',
    'field.field.paragraph.image_text.parade_image',
    'field.field.paragraph.image_text.parade_layout',
    'field.field.paragraph.image_text.parade_text',
    'field.field.paragraph.image_text.parade_title',
    'field.field.paragraph.image_text.parade_view_mode',
    'field.field.paragraph.images.parade_anchor',
    'field.field.paragraph.images.parade_color_scheme',
    'field.field.paragraph.images.parade_images',
    'field.field.paragraph.images.parade_title',
    'field.field.paragraph.locations.parade_anchor',
    'field.field.paragraph.locations.parade_color_scheme',
    'field.field.paragraph.locations.parade_geofield',
    'field.field.paragraph.locations.parade_location',
    'field.field.paragraph.locations.parade_text',
    'field.field.paragraph.locations.parade_title',
    'field.field.paragraph.marketo_form.parade_anchor',
    'field.field.paragraph.marketo_form.parade_color_scheme',
    'field.field.paragraph.marketo_form.parade_enable_confirm_message',
    'field.field.paragraph.marketo_form.parade_enable_linkedin_autofill',
    'field.field.paragraph.marketo_form.parade_image',
    'field.field.paragraph.marketo_form.parade_layout',
    'field.field.paragraph.marketo_form.parade_lead_text',
    'field.field.paragraph.marketo_form.parade_marketo_form',
    'field.field.paragraph.marketo_form.parade_text',
    'field.field.paragraph.marketo_form.parade_title',
    'field.field.paragraph.marketo_poll.parade_anchor',
    'field.field.paragraph.marketo_poll.parade_color_scheme',
    'field.field.paragraph.marketo_poll.parade_marketo_poll',
    'field.field.paragraph.marketo_poll.parade_title',
    'field.field.paragraph.parallax.parade_anchor',
    'field.field.paragraph.parallax.parade_background',
    'field.field.paragraph.parallax.parade_color_scheme',
    'field.field.paragraph.parallax.parade_enable_parallax',
    'field.field.paragraph.parallax.parade_image',
    'field.field.paragraph.parallax.parade_minimum_height',
    'field.field.paragraph.parallax.parade_text',
    'field.field.paragraph.parallax.parade_title',
    'field.field.paragraph.savings_calculator.parade_anchor',
    'field.field.paragraph.savings_calculator.parade_input_label',
    'field.field.paragraph.savings_calculator.parade_result_label',
    'field.field.paragraph.savings_calculator.parade_title',
    'field.field.paragraph.simple.parade_anchor',
    'field.field.paragraph.simple.parade_call_to_action',
    'field.field.paragraph.simple.parade_color_scheme',
    'field.field.paragraph.simple.parade_layout',
    'field.field.paragraph.simple.parade_text',
    'field.field.paragraph.simple.parade_title',
    'field.field.paragraph.simple.parade_view_mode',
    'field.field.paragraph.social_links.parade_color_scheme',
    'field.field.paragraph.social_links.parade_social_link',
    'field.field.paragraph.social_links.parade_title',
    'field.field.paragraph.text_box.parade_call_to_action',
    'field.field.paragraph.text_box.parade_color_scheme',
    'field.field.paragraph.text_box.parade_image',
    'field.field.paragraph.text_box.parade_text',
    'field.field.paragraph.text_box.parade_title',
    'field.field.paragraph.text_boxes.parade_anchor',
    'field.field.paragraph.text_boxes.parade_boxes_per_row',
    'field.field.paragraph.text_boxes.parade_call_to_action',
    'field.field.paragraph.text_boxes.parade_color_scheme',
    'field.field.paragraph.text_boxes.parade_layout',
    'field.field.paragraph.text_boxes.parade_paragraphs',
    'field.field.paragraph.text_boxes.parade_text',
    'field.field.paragraph.text_boxes.parade_title',
    'field.field.paragraph.text_boxes.parade_view_mode',
    'field.field.paragraph.twitter_feed.parade_anchor',
    'field.field.paragraph.twitter_feed.parade_text',
    'field.field.paragraph.twitter_feed.parade_title',
    'field.field.paragraph.twitter_feed.parade_twitter_feed',

    'classy_paragraphs.classy_paragraphs_style.color_blue',
    'classy_paragraphs.classy_paragraphs_style.color_default',
    'classy_paragraphs.classy_paragraphs_style.color_light_blue',
    'classy_paragraphs.classy_paragraphs_style.color_light_grey',
    'classy_paragraphs.classy_paragraphs_style.color_shaded',
    'classy_paragraphs.classy_paragraphs_style.color_dark_grey',
    'classy_paragraphs.classy_paragraphs_style.color_green',
    'classy_paragraphs.classy_paragraphs_style.color_grey',
    'classy_paragraphs.classy_paragraphs_style.color_light_green',
    'classy_paragraphs.classy_paragraphs_style.color_light_orange',
    'classy_paragraphs.classy_paragraphs_style.color_light_red',
    'classy_paragraphs.classy_paragraphs_style.color_orange',
    'classy_paragraphs.classy_paragraphs_style.color_red',

    'classy_paragraphs.classy_paragraphs_style.layout_image_1st',
    'classy_paragraphs.classy_paragraphs_style.layout_none',
    'classy_paragraphs.classy_paragraphs_style.layout_one_column',
    'classy_paragraphs.classy_paragraphs_style.layout_rounded_image',
    'classy_paragraphs.classy_paragraphs_style.layout_separator_clean',
    'classy_paragraphs.classy_paragraphs_style.layout_text_1st',
    'classy_paragraphs.classy_paragraphs_style.layout_text_1st_enhanced',
    'classy_paragraphs.classy_paragraphs_style.layout_text_with_an_icon',
    'classy_paragraphs.classy_paragraphs_style.layout_two_column_content_1st',
    'classy_paragraphs.classy_paragraphs_style.layout_two_column_title_1st',
    'classy_paragraphs.classy_paragraphs_style.layout_clean',
    'classy_paragraphs.classy_paragraphs_style.layout_download',
    'classy_paragraphs.classy_paragraphs_style.layout_lot_of_infos',
    'classy_paragraphs.classy_paragraphs_style.layout_smallinfo',
    'classy_paragraphs.classy_paragraphs_style.layout_contacts',
    'classy_paragraphs.classy_paragraphs_style.layout_one_column_centered',

    'language.content_settings.content_moderation_state.content_moderation_state',
    'language.content_settings.paragraph.header',
    'language.content_settings.paragraph.image_text',
    'language.content_settings.paragraph.images',
    'language.content_settings.paragraph.locations',
    'language.content_settings.paragraph.marketo_form',
    'language.content_settings.paragraph.marketo_poll',
    'language.content_settings.paragraph.parallax',
    'language.content_settings.paragraph.simple',
    'language.content_settings.paragraph.social_links',
    'language.content_settings.paragraph.text_box',
    'language.content_settings.paragraph.text_boxes',
    'language.content_settings.paragraph.twitter_feed',

    'core.base_field_override.paragraph.header.created',
    'core.base_field_override.paragraph.header.status',
    'core.base_field_override.paragraph.header.uid',
    'core.base_field_override.paragraph.image_text.created',
    'core.base_field_override.paragraph.image_text.status',
    'core.base_field_override.paragraph.image_text.uid',
    'core.base_field_override.paragraph.images.created',
    'core.base_field_override.paragraph.images.status',
    'core.base_field_override.paragraph.images.uid',
    'core.base_field_override.paragraph.locations.created',
    'core.base_field_override.paragraph.locations.moderation_state',
    'core.base_field_override.paragraph.locations.status',
    'core.base_field_override.paragraph.locations.uid',
    'core.base_field_override.paragraph.marketo_poll.created',
    'core.base_field_override.paragraph.marketo_poll.moderation_state',
    'core.base_field_override.paragraph.marketo_poll.status',
    'core.base_field_override.paragraph.marketo_poll.uid',
    'core.base_field_override.paragraph.parallax.created',
    'core.base_field_override.paragraph.parallax.status',
    'core.base_field_override.paragraph.parallax.uid',
    'core.base_field_override.paragraph.simple.created',
    'core.base_field_override.paragraph.simple.status',
    'core.base_field_override.paragraph.simple.uid',
    'core.base_field_override.paragraph.social_links.created',
    'core.base_field_override.paragraph.social_links.moderation_state',
    'core.base_field_override.paragraph.social_links.status',
    'core.base_field_override.paragraph.social_links.uid',
    'core.base_field_override.paragraph.text_box.created',
    'core.base_field_override.paragraph.text_box.status',
    'core.base_field_override.paragraph.text_box.uid',
    'core.base_field_override.paragraph.text_boxes.created',
    'core.base_field_override.paragraph.text_boxes.status',
    'core.base_field_override.paragraph.text_boxes.uid',
    'core.base_field_override.paragraph.twitter_feed.created',
    'core.base_field_override.paragraph.twitter_feed.moderation_state',
    'core.base_field_override.paragraph.twitter_feed.status',
    'core.base_field_override.paragraph.twitter_feed.uid',
  ];

  foreach ($configs as $config) {
    $configStorage->write($config, $source->read($config));
  }
}

/**
 * Set module weight higher than parade.
 */
function campaign_pages_update_8008() {
  module_set_weight('campaign_pages', 1);
}

/**
 * Truncate deleted fields data - leaded to data loss.
 */
function campaign_pages_update_8009() {
  $properties = array(
    'deleted' => TRUE,
    'include_deleted' => TRUE,
  );
  $fields = entity_load_multiple_by_properties('field_config', $properties);

  foreach ($fields as $field_definition) {
    $storage_id = substr(hash('sha256', $field_definition->getFieldStorageDefinition()->getUniqueStorageIdentifier()), 0, 10);
    $deleted_table_name = 'field_deleted_data_' . $storage_id;
    $deleted_revision_table_name = 'field_deleted_revision_' . $storage_id;
    if (db_table_exists($deleted_table_name)) {
      db_truncate($deleted_table_name)->execute();
    }
    if (db_table_exists($deleted_revision_table_name)) {
      db_truncate($deleted_revision_table_name)->execute();
    }
  }
}

/**
 * Refactor campaign node type fields to parade_.
 */
function campaign_pages_update_8010() {
  field_purge_batch(100);

  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $updateManager */
  $updateManager = \Drupal::entityDefinitionUpdateManager();
  // Apply pending updates..
  if ($updateManager->needsUpdates()) {
    $updateManager->applyUpdates();
  }

  // Import new parade fields from sync directory.
  _campaign_pages_import_campaign_node_parade_fields();

  field_purge_batch(100);

  // Install new fields..
  if ($updateManager->needsUpdates()) {
    $updateManager->applyUpdates();
  }
}

/**
 * Import new campaign node type parade fields from sync directory.
 */
function _campaign_pages_import_campaign_node_parade_fields() {
  $projectConfigPath = config_get_config_directory(CONFIG_SYNC_DIRECTORY);
  $source = new FileStorage($projectConfigPath);
  $configStorage = \Drupal::service('config.storage');

  $configs = [
    'field.storage.node.parade_onepage_id',
    'field.storage.node.parade_onepage_menu',
    'field.storage.node.parade_onepage_sections',

    'field.field.node.campaign.parade_onepage_id',
    'field.field.node.campaign.parade_onepage_menu',
    'field.field.node.campaign.parade_onepage_sections',
  ];

  foreach ($configs as $config) {
    $configStorage->write($config, $source->read($config));
  }
}
